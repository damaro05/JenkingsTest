<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="gralDone" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="gralPower" xml:space="preserve">
    <value>Power</value>
  </data>
  <data name="gralTemperature" xml:space="preserve">
    <value>Temperature</value>
  </data>
  <data name="regAdd" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="regAxisGridAxis" xml:space="preserve">
    <value>Axis</value>
  </data>
  <data name="regAxisGridGrid" xml:space="preserve">
    <value>Grid</value>
  </data>
  <data name="regAxisGridGridStep" xml:space="preserve">
    <value>Grid Step</value>
  </data>
  <data name="regAxisGridSeconds" xml:space="preserve">
    <value>(seconds)</value>
  </data>
  <data name="regAxisGridTimeWindow" xml:space="preserve">
    <value>Time Window</value>
  </data>
  <data name="regButCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="regButOk" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="regDataLost" xml:space="preserve">
    <value>Data series will be lost. Are you sure to continue?</value>
  </data>
  <data name="regFinish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="regMnuConfig" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="regMnuConfigAxis" xml:space="preserve">
    <value>Axis and Grid</value>
  </data>
  <data name="regMnuConfigOptions" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="regMnuConfigSeries" xml:space="preserve">
    <value>Series</value>
  </data>
  <data name="regMnuConfigTemplates" xml:space="preserve">
    <value>Templates</value>
  </data>
  <data name="regMnuConfigTemplatesLoad" xml:space="preserve">
    <value>Load</value>
  </data>
  <data name="regMnuConfigTemplatesSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="regMnuConfigTitle" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="regMnuConfigWizard" xml:space="preserve">
    <value>Wizard</value>
  </data>
  <data name="regMnuFile" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="regMnuFileExportToCSV" xml:space="preserve">
    <value>Export to CSV</value>
  </data>
  <data name="regMnuFileNew" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="regMnuFileOpen" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="regMnuFilePrint" xml:space="preserve">
    <value>Print</value>
  </data>
  <data name="regMnuFileSaveAs" xml:space="preserve">
    <value>Save As</value>
  </data>
  <data name="regModify" xml:space="preserve">
    <value>Modify</value>
  </data>
  <data name="regNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="regOptClrBackground" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="regOptClrDefaults" xml:space="preserve">
    <value>Restore Defaults</value>
  </data>
  <data name="regOptClrGridDiv" xml:space="preserve">
    <value>Grid Divisions</value>
  </data>
  <data name="regOptClrPowerAxis" xml:space="preserve">
    <value>Power Axis</value>
  </data>
  <data name="regOptClrSeriesText" xml:space="preserve">
    <value>Series Text</value>
  </data>
  <data name="regOptClrTempAxis" xml:space="preserve">
    <value>Temperature Axis</value>
  </data>
  <data name="regOptClrTimeAxis" xml:space="preserve">
    <value>Time Axis</value>
  </data>
  <data name="regOptClrTitle" xml:space="preserve">
    <value>Title Text</value>
  </data>
  <data name="regOptColors" xml:space="preserve">
    <value>Colors</value>
  </data>
  <data name="regOptLinesAndPoints" xml:space="preserve">
    <value>Lines and Points</value>
  </data>
  <data name="regOptLineWidth" xml:space="preserve">
    <value>Line Width (pix.)</value>
  </data>
  <data name="regOptPointWidth" xml:space="preserve">
    <value>Point Width (pix.)</value>
  </data>
  <data name="regOptStartSide" xml:space="preserve">
    <value>Plot Starting Side</value>
  </data>
  <data name="regOptStartSideLeft" xml:space="preserve">
    <value>From left</value>
  </data>
  <data name="regOptStartSideRight" xml:space="preserve">
    <value>From right</value>
  </data>
  <data name="regOptTriggerAutoInfo" xml:space="preserve">
    <value>It starts when extract the tool out of the stand</value>
  </data>
  <data name="regOptTriggerManualInfo" xml:space="preserve">
    <value>It starts and finishes by using the buttons in the plot</value>
  </data>
  <data name="regOptTriggerSingleInfo" xml:space="preserve">
    <value>It starts when extract the tool out of the stand and finishes when time window is reached</value>
  </data>
  <data name="regPlotTitle" xml:space="preserve">
    <value>Plot Title</value>
  </data>
  <data name="regPrevious" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="regRemove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="regSeriesListOfSeries" xml:space="preserve">
    <value>List of Series</value>
  </data>
  <data name="regSeriesMagnitudePower" xml:space="preserve">
    <value>Power ( % )</value>
  </data>
  <data name="regSeriesMagnitudeTemp" xml:space="preserve">
    <value>Temperature ( {0} )</value>
    <comment>{0} shows ºC or ºF</comment>
  </data>
  <data name="regSeriesSerieColor" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="regSeriesSerieColorSelect" xml:space="preserve">
    <value>Select...</value>
  </data>
  <data name="regSeriesSerieData" xml:space="preserve">
    <value>Serie Data</value>
  </data>
  <data name="regSeriesSerieLine" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="regSeriesSerieMagnitude" xml:space="preserve">
    <value>Magnitude</value>
  </data>
  <data name="regSeriesSerieName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="regSeriesSeriePoints" xml:space="preserve">
    <value>Points</value>
  </data>
  <data name="regSeriesSeriePort" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="regSeriesSerieShowLine" xml:space="preserve">
    <value>Show Line</value>
  </data>
  <data name="regSeriesSerieShowPoints" xml:space="preserve">
    <value>Show Points</value>
  </data>
  <data name="regSeriesSerieStation" xml:space="preserve">
    <value>Station</value>
  </data>
  <data name="regStripCoordinates" xml:space="preserve">
    <value>Coordinates</value>
  </data>
  <data name="regStripDefaultZoom" xml:space="preserve">
    <value>Default Zoom</value>
  </data>
  <data name="regStripPause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="regStripPlay" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="regStripRecord" xml:space="preserve">
    <value>Record</value>
  </data>
  <data name="regStripResetTrigger" xml:space="preserve">
    <value>Reset Trigger Detection</value>
  </data>
  <data name="regStripStatusPause" xml:space="preserve">
    <value>Paused</value>
  </data>
  <data name="regStripStatusPlay" xml:space="preserve">
    <value>Playing</value>
  </data>
  <data name="regStripStatusRecord" xml:space="preserve">
    <value>Recording</value>
  </data>
  <data name="regStripStatusStop" xml:space="preserve">
    <value>Stopped</value>
  </data>
  <data name="regStripStop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="regStripTrigger" xml:space="preserve">
    <value>Trigger</value>
  </data>
  <data name="regStripTriggerAuto" xml:space="preserve">
    <value>Auto</value>
  </data>
  <data name="regStripTriggerManual" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="regStripTriggerSingle" xml:space="preserve">
    <value>Single</value>
  </data>
  <data name="regStripZoom" xml:space="preserve">
    <value>Zoom</value>
  </data>
  <data name="regTemplate" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="regTemplateDefaultName" xml:space="preserve">
    <value>myTemplateName</value>
  </data>
  <data name="regTemplateEnterName" xml:space="preserve">
    <value>Please, type the name for the template.</value>
  </data>
  <data name="regTime" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="gralWarning" xml:space="preserve">
    <value>Warning!</value>
  </data>
  <data name="regWiz1Info" xml:space="preserve">
    <value>Step 1 of 2. Please, connect the stations from where data is desired. Then add the desired series to be shown in the plot by setting the parameters and click on the 'Add' button. Finally, type the desired title for your plot.</value>
  </data>
  <data name="regWiz2Info" xml:space="preserve">
    <value>Step 2 of 2. Select the axis ranges and the grid steps. For the time axis the value represent a time window.</value>
  </data>
  <data name="regWizard2AxisRange" xml:space="preserve">
    <value>Axis Range</value>
  </data>
  <data name="regWizardSeriesAndTitle" xml:space="preserve">
    <value>Series and Title</value>
  </data>
  <data name="regTemplateList" xml:space="preserve">
    <value>Template List</value>
  </data>
  <data name="regTemplateParams" xml:space="preserve">
    <value>Template Parameters</value>
  </data>
  <data name="regTemplateSeriesData" xml:space="preserve">
    <value>Series</value>
  </data>
  <data name="regTemplateTrigger" xml:space="preserve">
    <value>Trigger</value>
  </data>
  <data name="regSeriesSerieStationNoName" xml:space="preserve">
    <value>No Name</value>
  </data>
  <data name="filterCommaSeparated" xml:space="preserve">
    <value>Comma-separated values  (*.csv)|*.csv</value>
  </data>
  <data name="filterLabRegister" xml:space="preserve">
    <value>LabRegister file (*.lbr)|*.lbr</value>
  </data>
  <data name="regEnterPlotTitle" xml:space="preserve">
    <value>Enter the desired title for the plot.</value>
  </data>
  <data name="regMsgExtNotValid" xml:space="preserve">
    <value>File extension must be .lbr or .csv</value>
  </data>
  <data name="regMsgGeneratingExt" xml:space="preserve">
    <value>Generating [0]</value>
    <comment>[0] is the extension, for ex. "CSV"</comment>
  </data>
  <data name="regMsgGeneratingFile" xml:space="preserve">
    <value>Generating [0]. Please wait...</value>
    <comment>[0] contains a file name</comment>
  </data>
  <data name="regMsgLoadingExt" xml:space="preserve">
    <value>Loading [0]</value>
    <comment>[0] is the extension, for ex. "CSV"</comment>
  </data>
  <data name="regMsgLoadingFile" xml:space="preserve">
    <value>Loading [0]. Please wait...</value>
    <comment>[0] contains a file name</comment>
  </data>
  <data name="regPlottingInAnotherWindow" xml:space="preserve">
    <value>There is a station defined for this plot, already plotting in another window.</value>
  </data>
  <data name="regCannotCreateFile" xml:space="preserve">
    <value>File {0} cannot be created (error: {1})</value>
  </data>
  <data name="regCannotOpenFile" xml:space="preserve">
    <value>File {0} cannot be opened (error: {1})</value>
  </data>
  <data name="regCoordTime" xml:space="preserve">
    <value>Time:</value>
    <comment>Time: xx:xx:xx</comment>
  </data>
  <data name="regSecondsPerTick" xml:space="preserve">
    <value>{0} Sec/Tick</value>
    <comment>Ex 2 Sec/Tick (Seconds per tick)</comment>
  </data>
  <data name="regNotLBRFile" xml:space="preserve">
    <value>It is not a LBR file or is corrupted.</value>
  </data>
  <data name="gralFlow" xml:space="preserve">
    <value>Flow</value>
    <comment>new</comment>
  </data>
  <data name="regSeriesMagnitudeFlow" xml:space="preserve">
    <value>Flow ( % )</value>
    <comment>new</comment>
  </data>
  <data name="regSeriesCannotSelectMagnitude" xml:space="preserve">
    <value>This magnitude is not compatible with the selected station.</value>
  </data>
</root>