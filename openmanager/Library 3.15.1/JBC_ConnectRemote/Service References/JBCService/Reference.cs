//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JBC_ConnectRemote.JBCService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    [System.SerializableAttribute()]
    public partial class faultError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_FaultError CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_FaultError Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_FaultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_FaultError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoError = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotControlledError = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StationNotFound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StationError = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToolError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotValidTool = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FunctionNotSupported = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_ContinuousModeData", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_ContinuousModeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_ContinuousModePort[] dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong sequenceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_ContinuousModePort[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong sequence {
            get {
                return this.sequenceField;
            }
            set {
                if ((this.sequenceField.Equals(value) != true)) {
                    this.sequenceField = value;
                    this.RaisePropertyChanged("sequence");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_ContinuousModePort", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_ContinuousModePort : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.OnOff desolderingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int powerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolStatus statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature temperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.OnOff desoldering {
            get {
                return this.desolderingField;
            }
            set {
                if ((this.desolderingField.Equals(value) != true)) {
                    this.desolderingField = value;
                    this.RaisePropertyChanged("desoldering");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port port {
            get {
                return this.portField;
            }
            set {
                if ((this.portField.Equals(value) != true)) {
                    this.portField = value;
                    this.RaisePropertyChanged("port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int power {
            get {
                return this.powerField;
            }
            set {
                if ((this.powerField.Equals(value) != true)) {
                    this.powerField = value;
                    this.RaisePropertyChanged("power");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature temperature {
            get {
                return this.temperatureField;
            }
            set {
                if ((object.ReferenceEquals(this.temperatureField, value) != true)) {
                    this.temperatureField = value;
                    this.RaisePropertyChanged("temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_getTemperature", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_getTemperature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CelsiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FahrenheitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UTIField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Celsius {
            get {
                return this.CelsiusField;
            }
            set {
                if ((this.CelsiusField.Equals(value) != true)) {
                    this.CelsiusField = value;
                    this.RaisePropertyChanged("Celsius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fahrenheit {
            get {
                return this.FahrenheitField;
            }
            set {
                if ((this.FahrenheitField.Equals(value) != true)) {
                    this.FahrenheitField = value;
                    this.RaisePropertyChanged("Fahrenheit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UTI {
            get {
                return this.UTIField;
            }
            set {
                if ((this.UTIField.Equals(value) != true)) {
                    this.UTIField = value;
                    this.RaisePropertyChanged("UTI");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OnOff", Namespace="http://schemas.datacontract.org/2004/07/DataJBC")]
    public enum OnOff : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _OFF = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _ON = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_Port", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_Port : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NUM_1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NUM_2 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NUM_3 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NUM_4 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_PORT = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_ToolStatus", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_ToolStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DESOLDER = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIBERNATION = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXTRACTOR = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SLEEP = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STAND = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_ContinuousModeData_HA", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_ContinuousModeData_HA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_ContinuousModePort_HA[] dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong sequenceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_ContinuousModePort_HA[] data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong sequence {
            get {
                return this.sequenceField;
            }
            set {
                if ((this.sequenceField.Equals(value) != true)) {
                    this.sequenceField = value;
                    this.RaisePropertyChanged("sequence");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_ContinuousModePort_HA", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_ContinuousModePort_HA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature ext1TempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature ext2TempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int flowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int powerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolStatus_HA statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature temperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int timeToStopField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature ext1Temp {
            get {
                return this.ext1TempField;
            }
            set {
                if ((object.ReferenceEquals(this.ext1TempField, value) != true)) {
                    this.ext1TempField = value;
                    this.RaisePropertyChanged("ext1Temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature ext2Temp {
            get {
                return this.ext2TempField;
            }
            set {
                if ((object.ReferenceEquals(this.ext2TempField, value) != true)) {
                    this.ext2TempField = value;
                    this.RaisePropertyChanged("ext2Temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int flow {
            get {
                return this.flowField;
            }
            set {
                if ((this.flowField.Equals(value) != true)) {
                    this.flowField = value;
                    this.RaisePropertyChanged("flow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port port {
            get {
                return this.portField;
            }
            set {
                if ((this.portField.Equals(value) != true)) {
                    this.portField = value;
                    this.RaisePropertyChanged("port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int power {
            get {
                return this.powerField;
            }
            set {
                if ((this.powerField.Equals(value) != true)) {
                    this.powerField = value;
                    this.RaisePropertyChanged("power");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolStatus_HA status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature temperature {
            get {
                return this.temperatureField;
            }
            set {
                if ((object.ReferenceEquals(this.temperatureField, value) != true)) {
                    this.temperatureField = value;
                    this.RaisePropertyChanged("temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int timeToStop {
            get {
                return this.timeToStopField;
            }
            set {
                if ((this.timeToStopField.Equals(value) != true)) {
                    this.timeToStopField = value;
                    this.RaisePropertyChanged("timeToStop");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_ToolStatus_HA", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_ToolStatus_HA : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STAND = 128,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PEDAL_PRESSED = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PEDAL_CONNECTED = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCTION_REQUESTED = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCTION = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COOLING = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HEATER_REQUESTED = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HEATER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_SpeedContinuousMode", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_SpeedContinuousMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFF = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_10mS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_20mS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_50mS = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_100mS = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_200mS = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_500mS = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_1000mS = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EthernetConfiguration", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_EthernetConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff DHCPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress DNS1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress DNS2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress GatewayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress MaskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort PortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff DHCP {
            get {
                return this.DHCPField;
            }
            set {
                if ((this.DHCPField.Equals(value) != true)) {
                    this.DHCPField = value;
                    this.RaisePropertyChanged("DHCP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress DNS1 {
            get {
                return this.DNS1Field;
            }
            set {
                if ((object.ReferenceEquals(this.DNS1Field, value) != true)) {
                    this.DNS1Field = value;
                    this.RaisePropertyChanged("DNS1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress DNS2 {
            get {
                return this.DNS2Field;
            }
            set {
                if ((object.ReferenceEquals(this.DNS2Field, value) != true)) {
                    this.DNS2Field = value;
                    this.RaisePropertyChanged("DNS2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Gateway {
            get {
                return this.GatewayField;
            }
            set {
                if ((object.ReferenceEquals(this.GatewayField, value) != true)) {
                    this.GatewayField = value;
                    this.RaisePropertyChanged("Gateway");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress Mask {
            get {
                return this.MaskField;
            }
            set {
                if ((object.ReferenceEquals(this.MaskField, value) != true)) {
                    this.MaskField = value;
                    this.RaisePropertyChanged("Mask");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_OnOff", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_OnOff : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _OFF = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _ON = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_RobotConfiguration", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_RobotConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort DataBitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotParity ParityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotProtocol ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotSpeed SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotStop StopBitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Address {
            get {
                return this.AddressField;
            }
            set {
                if ((this.AddressField.Equals(value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort DataBits {
            get {
                return this.DataBitsField;
            }
            set {
                if ((this.DataBitsField.Equals(value) != true)) {
                    this.DataBitsField = value;
                    this.RaisePropertyChanged("DataBits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotParity Parity {
            get {
                return this.ParityField;
            }
            set {
                if ((this.ParityField.Equals(value) != true)) {
                    this.ParityField = value;
                    this.RaisePropertyChanged("Parity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotProtocol Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((this.ProtocolField.Equals(value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotSpeed Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_RobotStop StopBits {
            get {
                return this.StopBitsField;
            }
            set {
                if ((this.StopBitsField.Equals(value) != true)) {
                    this.StopBitsField = value;
                    this.RaisePropertyChanged("StopBits");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_RobotParity", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_RobotParity : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EVEN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ODD = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_RobotProtocol", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_RobotProtocol : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RS232 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RS485 = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_RobotSpeed", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_RobotSpeed : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_1200 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_2400 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_4800 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_9600 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_19200 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_38400 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_57600 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_115200 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_230400 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_250000 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_460800 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BPS_500000 = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_RobotStop", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_RobotStop : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BITS_1 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BITS_2 = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_PeripheralInfo", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_PeripheralInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralActivation ActivationModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short DelayTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Hash_MCU_UIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port PortAttachedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralStatusPD StatusPDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralFunction WorkFunctionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralActivation ActivationMode {
            get {
                return this.ActivationModeField;
            }
            set {
                if ((this.ActivationModeField.Equals(value) != true)) {
                    this.ActivationModeField = value;
                    this.RaisePropertyChanged("ActivationMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTimeField, value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short DelayTime {
            get {
                return this.DelayTimeField;
            }
            set {
                if ((this.DelayTimeField.Equals(value) != true)) {
                    this.DelayTimeField = value;
                    this.RaisePropertyChanged("DelayTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hash_MCU_UID {
            get {
                return this.Hash_MCU_UIDField;
            }
            set {
                if ((object.ReferenceEquals(this.Hash_MCU_UIDField, value) != true)) {
                    this.Hash_MCU_UIDField = value;
                    this.RaisePropertyChanged("Hash_MCU_UID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port PortAttached {
            get {
                return this.PortAttachedField;
            }
            set {
                if ((this.PortAttachedField.Equals(value) != true)) {
                    this.PortAttachedField = value;
                    this.RaisePropertyChanged("PortAttached");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusActive {
            get {
                return this.StatusActiveField;
            }
            set {
                if ((this.StatusActiveField.Equals(value) != true)) {
                    this.StatusActiveField = value;
                    this.RaisePropertyChanged("StatusActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralStatusPD StatusPD {
            get {
                return this.StatusPDField;
            }
            set {
                if ((this.StatusPDField.Equals(value) != true)) {
                    this.StatusPDField = value;
                    this.RaisePropertyChanged("StatusPD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PeripheralFunction WorkFunction {
            get {
                return this.WorkFunctionField;
            }
            set {
                if ((this.WorkFunctionField.Equals(value) != true)) {
                    this.WorkFunctionField = value;
                    this.RaisePropertyChanged("WorkFunction");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_PeripheralActivation", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_PeripheralActivation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PRESSED = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PULLED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_FUNCTION = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_PeripheralStatusPD", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_PeripheralStatusPD : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SHORT_CIRCUIT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPEN_CIRCUIT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_PeripheralType", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_PeripheralType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PD = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MN = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FS = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MV = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_TYPE = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_PeripheralFunction", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_PeripheralFunction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SLEEP = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXTRACTOR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MODUL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_FUNCTION = -1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Profile_HA", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Profile_HA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_FirmwareStation", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_FirmwareStation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string hardwareVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string languageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string modelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string modelVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string protocolVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string softwareVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long stationIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.fileNameField, value) != true)) {
                    this.fileNameField = value;
                    this.RaisePropertyChanged("fileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hardwareVersion {
            get {
                return this.hardwareVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.hardwareVersionField, value) != true)) {
                    this.hardwareVersionField = value;
                    this.RaisePropertyChanged("hardwareVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string language {
            get {
                return this.languageField;
            }
            set {
                if ((object.ReferenceEquals(this.languageField, value) != true)) {
                    this.languageField = value;
                    this.RaisePropertyChanged("language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string model {
            get {
                return this.modelField;
            }
            set {
                if ((object.ReferenceEquals(this.modelField, value) != true)) {
                    this.modelField = value;
                    this.RaisePropertyChanged("model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string modelVersion {
            get {
                return this.modelVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.modelVersionField, value) != true)) {
                    this.modelVersionField = value;
                    this.RaisePropertyChanged("modelVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string protocolVersion {
            get {
                return this.protocolVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.protocolVersionField, value) != true)) {
                    this.protocolVersionField = value;
                    this.RaisePropertyChanged("protocolVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string softwareVersion {
            get {
                return this.softwareVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.softwareVersionField, value) != true)) {
                    this.softwareVersionField = value;
                    this.RaisePropertyChanged("softwareVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long stationID {
            get {
                return this.stationIDField;
            }
            set {
                if ((this.stationIDField.Equals(value) != true)) {
                    this.stationIDField = value;
                    this.RaisePropertyChanged("stationID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_MessageType", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INFORMATION_MESSAGE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WARNING_MESSAGE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ERROR_MESSAGE = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_ConfigurationPortStation", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_ConfigurationPortStation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdjustTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortSelectedTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ToolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdjustTemp {
            get {
                return this.AdjustTempField;
            }
            set {
                if ((this.AdjustTempField.Equals(value) != true)) {
                    this.AdjustTempField = value;
                    this.RaisePropertyChanged("AdjustTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PortSelectedTemp {
            get {
                return this.PortSelectedTempField;
            }
            set {
                if ((this.PortSelectedTempField.Equals(value) != true)) {
                    this.PortSelectedTempField = value;
                    this.RaisePropertyChanged("PortSelectedTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools Tool {
            get {
                return this.ToolField;
            }
            set {
                if ((this.ToolField.Equals(value) != true)) {
                    this.ToolField = value;
                    this.RaisePropertyChanged("Tool");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_GenericStationTools", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_GenericStationTools : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOTOOL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T210 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T245 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PA = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HT = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DS = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DR = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NT105 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NP105 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JT = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TE = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PHS = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PHB = 34,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpeedContinuousMode", Namespace="http://schemas.datacontract.org/2004/07/DataJBC")]
    public enum SpeedContinuousMode : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OFF = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_10mS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_20mS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_50mS = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_100mS = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_200mS = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_500mS = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        T_1000mS = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_TraceDataSequence", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_TraceDataSequence : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] bytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool finalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sequenceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] bytes {
            get {
                return this.bytesField;
            }
            set {
                if ((object.ReferenceEquals(this.bytesField, value) != true)) {
                    this.bytesField = value;
                    this.RaisePropertyChanged("bytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool final {
            get {
                return this.finalField;
            }
            set {
                if ((this.finalField.Equals(value) != true)) {
                    this.finalField = value;
                    this.RaisePropertyChanged("final");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int sequence {
            get {
                return this.sequenceField;
            }
            set {
                if ((this.sequenceField.Equals(value) != true)) {
                    this.sequenceField = value;
                    this.RaisePropertyChanged("sequence");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_StationController_Info", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_StationController_Info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PCNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SwVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PCName {
            get {
                return this.PCNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PCNameField, value) != true)) {
                    this.PCNameField = value;
                    this.RaisePropertyChanged("PCName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SwVersion {
            get {
                return this.SwVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.SwVersionField, value) != true)) {
                    this.SwVersionField = value;
                    this.RaisePropertyChanged("SwVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_StationControllerAction", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_StationControllerAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartSearch = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StopSearch = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InitialSearchOn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InitialSearchOff = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_StationControllerConnType", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_StationControllerConnType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        USB = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ETH = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Station_Sold_Info", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Station_Sold_Info : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string COMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_Features FeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_FirmwareStation[] InfoUpdateFirmwareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InternalIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ModelVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ParentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationType StationTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools[] SupportedToolsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TempLevelsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Version_HardwareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Version_SoftwareField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string COM {
            get {
                return this.COMField;
            }
            set {
                if ((object.ReferenceEquals(this.COMField, value) != true)) {
                    this.COMField = value;
                    this.RaisePropertyChanged("COM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionType {
            get {
                return this.ConnectionTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionTypeField, value) != true)) {
                    this.ConnectionTypeField = value;
                    this.RaisePropertyChanged("ConnectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_Features Features {
            get {
                return this.FeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FeaturesField, value) != true)) {
                    this.FeaturesField = value;
                    this.RaisePropertyChanged("Features");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_FirmwareStation[] InfoUpdateFirmware {
            get {
                return this.InfoUpdateFirmwareField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoUpdateFirmwareField, value) != true)) {
                    this.InfoUpdateFirmwareField = value;
                    this.RaisePropertyChanged("InfoUpdateFirmware");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InternalID {
            get {
                return this.InternalIDField;
            }
            set {
                if ((object.ReferenceEquals(this.InternalIDField, value) != true)) {
                    this.InternalIDField = value;
                    this.RaisePropertyChanged("InternalID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelType {
            get {
                return this.ModelTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelTypeField, value) != true)) {
                    this.ModelTypeField = value;
                    this.RaisePropertyChanged("ModelType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ModelVersion {
            get {
                return this.ModelVersionField;
            }
            set {
                if ((this.ModelVersionField.Equals(value) != true)) {
                    this.ModelVersionField = value;
                    this.RaisePropertyChanged("ModelVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PortCount {
            get {
                return this.PortCountField;
            }
            set {
                if ((this.PortCountField.Equals(value) != true)) {
                    this.PortCountField = value;
                    this.RaisePropertyChanged("PortCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolField, value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationType StationType {
            get {
                return this.StationTypeField;
            }
            set {
                if ((this.StationTypeField.Equals(value) != true)) {
                    this.StationTypeField = value;
                    this.RaisePropertyChanged("StationType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools[] SupportedTools {
            get {
                return this.SupportedToolsField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportedToolsField, value) != true)) {
                    this.SupportedToolsField = value;
                    this.RaisePropertyChanged("SupportedTools");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TempLevelsCount {
            get {
                return this.TempLevelsCountField;
            }
            set {
                if ((this.TempLevelsCountField.Equals(value) != true)) {
                    this.TempLevelsCountField = value;
                    this.RaisePropertyChanged("TempLevelsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version_Hardware {
            get {
                return this.Version_HardwareField;
            }
            set {
                if ((object.ReferenceEquals(this.Version_HardwareField, value) != true)) {
                    this.Version_HardwareField = value;
                    this.RaisePropertyChanged("Version_Hardware");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version_Software {
            get {
                return this.Version_SoftwareField;
            }
            set {
                if ((object.ReferenceEquals(this.Version_SoftwareField, value) != true)) {
                    this.Version_SoftwareField = value;
                    this.RaisePropertyChanged("Version_Software");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Features", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Features : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllToolsSamePortSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CartridgesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DelayWithStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisplaySettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EthernetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FirmwareUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MaxTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MinTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PartialCountersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PeripheralsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RobotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TempLevelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TempLevelsWithStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((this.AlarmsField.Equals(value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllToolsSamePortSettings {
            get {
                return this.AllToolsSamePortSettingsField;
            }
            set {
                if ((this.AllToolsSamePortSettingsField.Equals(value) != true)) {
                    this.AllToolsSamePortSettingsField = value;
                    this.RaisePropertyChanged("AllToolsSamePortSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Cartridges {
            get {
                return this.CartridgesField;
            }
            set {
                if ((this.CartridgesField.Equals(value) != true)) {
                    this.CartridgesField = value;
                    this.RaisePropertyChanged("Cartridges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DelayWithStatus {
            get {
                return this.DelayWithStatusField;
            }
            set {
                if ((this.DelayWithStatusField.Equals(value) != true)) {
                    this.DelayWithStatusField = value;
                    this.RaisePropertyChanged("DelayWithStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DisplaySettings {
            get {
                return this.DisplaySettingsField;
            }
            set {
                if ((this.DisplaySettingsField.Equals(value) != true)) {
                    this.DisplaySettingsField = value;
                    this.RaisePropertyChanged("DisplaySettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Ethernet {
            get {
                return this.EthernetField;
            }
            set {
                if ((this.EthernetField.Equals(value) != true)) {
                    this.EthernetField = value;
                    this.RaisePropertyChanged("Ethernet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FirmwareUpdate {
            get {
                return this.FirmwareUpdateField;
            }
            set {
                if ((this.FirmwareUpdateField.Equals(value) != true)) {
                    this.FirmwareUpdateField = value;
                    this.RaisePropertyChanged("FirmwareUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MaxTemp {
            get {
                return this.MaxTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MaxTempField, value) != true)) {
                    this.MaxTempField = value;
                    this.RaisePropertyChanged("MaxTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MinTemp {
            get {
                return this.MinTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MinTempField, value) != true)) {
                    this.MinTempField = value;
                    this.RaisePropertyChanged("MinTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PartialCounters {
            get {
                return this.PartialCountersField;
            }
            set {
                if ((this.PartialCountersField.Equals(value) != true)) {
                    this.PartialCountersField = value;
                    this.RaisePropertyChanged("PartialCounters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Peripherals {
            get {
                return this.PeripheralsField;
            }
            set {
                if ((this.PeripheralsField.Equals(value) != true)) {
                    this.PeripheralsField = value;
                    this.RaisePropertyChanged("Peripherals");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Robot {
            get {
                return this.RobotField;
            }
            set {
                if ((this.RobotField.Equals(value) != true)) {
                    this.RobotField = value;
                    this.RaisePropertyChanged("Robot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TempLevels {
            get {
                return this.TempLevelsField;
            }
            set {
                if ((this.TempLevelsField.Equals(value) != true)) {
                    this.TempLevelsField = value;
                    this.RaisePropertyChanged("TempLevels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TempLevelsWithStatus {
            get {
                return this.TempLevelsWithStatusField;
            }
            set {
                if ((this.TempLevelsWithStatusField.Equals(value) != true)) {
                    this.TempLevelsWithStatusField = value;
                    this.RaisePropertyChanged("TempLevelsWithStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_StationType", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_StationType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SOLD = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HA = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Station_Sold_Status", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Station_Sold_Status : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus ContinuousModeStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection ControlModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControlModeUserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff RemoteModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationError StationErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature TRAFOTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature TempErrorMOSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature TempErrorTRAFOField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus ContinuousModeStatus {
            get {
                return this.ContinuousModeStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinuousModeStatusField, value) != true)) {
                    this.ContinuousModeStatusField = value;
                    this.RaisePropertyChanged("ContinuousModeStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection ControlMode {
            get {
                return this.ControlModeField;
            }
            set {
                if ((this.ControlModeField.Equals(value) != true)) {
                    this.ControlModeField = value;
                    this.RaisePropertyChanged("ControlMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlModeUserName {
            get {
                return this.ControlModeUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlModeUserNameField, value) != true)) {
                    this.ControlModeUserNameField = value;
                    this.RaisePropertyChanged("ControlModeUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff RemoteMode {
            get {
                return this.RemoteModeField;
            }
            set {
                if ((this.RemoteModeField.Equals(value) != true)) {
                    this.RemoteModeField = value;
                    this.RaisePropertyChanged("RemoteMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationError StationError {
            get {
                return this.StationErrorField;
            }
            set {
                if ((this.StationErrorField.Equals(value) != true)) {
                    this.StationErrorField = value;
                    this.RaisePropertyChanged("StationError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature TRAFOTemp {
            get {
                return this.TRAFOTempField;
            }
            set {
                if ((object.ReferenceEquals(this.TRAFOTempField, value) != true)) {
                    this.TRAFOTempField = value;
                    this.RaisePropertyChanged("TRAFOTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature TempErrorMOS {
            get {
                return this.TempErrorMOSField;
            }
            set {
                if ((object.ReferenceEquals(this.TempErrorMOSField, value) != true)) {
                    this.TempErrorMOSField = value;
                    this.RaisePropertyChanged("TempErrorMOS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature TempErrorTRAFO {
            get {
                return this.TempErrorTRAFOField;
            }
            set {
                if ((object.ReferenceEquals(this.TempErrorTRAFOField, value) != true)) {
                    this.TempErrorTRAFOField = value;
                    this.RaisePropertyChanged("TempErrorTRAFO");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_ContinuousModeStatus", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_ContinuousModeStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_SpeedContinuousMode SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool port1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool port2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool port3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool port4Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_SpeedContinuousMode Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool port1 {
            get {
                return this.port1Field;
            }
            set {
                if ((this.port1Field.Equals(value) != true)) {
                    this.port1Field = value;
                    this.RaisePropertyChanged("port1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool port2 {
            get {
                return this.port2Field;
            }
            set {
                if ((this.port2Field.Equals(value) != true)) {
                    this.port2Field = value;
                    this.RaisePropertyChanged("port2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool port3 {
            get {
                return this.port3Field;
            }
            set {
                if ((this.port3Field.Equals(value) != true)) {
                    this.port3Field = value;
                    this.RaisePropertyChanged("port3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool port4 {
            get {
                return this.port4Field;
            }
            set {
                if ((this.port4Field.Equals(value) != true)) {
                    this.port4Field = value;
                    this.RaisePropertyChanged("port4");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_ControlModeConnection", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_ControlModeConnection : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MONITOR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONTROL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BLOCK_CONTROL = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ROBOT = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_StationError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_StationError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOPOVERLOAD_TRAFO = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONGSENSOR_TRAFO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MEMORY = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAINSFREQUENCY = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATION_MODEL = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_MCU_TOOLS = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Station_HA_Status", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Station_HA_Status : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus ContinuousModeStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection ControlModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControlModeUserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff RemoteModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationError StationErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus ContinuousModeStatus {
            get {
                return this.ContinuousModeStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinuousModeStatusField, value) != true)) {
                    this.ContinuousModeStatusField = value;
                    this.RaisePropertyChanged("ContinuousModeStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection ControlMode {
            get {
                return this.ControlModeField;
            }
            set {
                if ((this.ControlModeField.Equals(value) != true)) {
                    this.ControlModeField = value;
                    this.RaisePropertyChanged("ControlMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlModeUserName {
            get {
                return this.ControlModeUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlModeUserNameField, value) != true)) {
                    this.ControlModeUserNameField = value;
                    this.RaisePropertyChanged("ControlModeUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff RemoteMode {
            get {
                return this.RemoteModeField;
            }
            set {
                if ((this.RemoteModeField.Equals(value) != true)) {
                    this.RemoteModeField = value;
                    this.RaisePropertyChanged("RemoteMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationError StationError {
            get {
                return this.StationErrorField;
            }
            set {
                if ((this.StationErrorField.Equals(value) != true)) {
                    this.StationErrorField = value;
                    this.RaisePropertyChanged("StationError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_StatusTool", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_StatusTool : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature ActualTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ConnectedToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Desold_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Extractor_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FutureModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Hiber_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_PeripheralInfo[] PeripheralField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature PortSelectedTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Power_x_MilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Sleep_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Stand_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusRemoteMode_Desold_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusRemoteMode_Extractor_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusRemoteMode_Sleep_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature Temp_MOSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_PortToolSettings This_PortToolSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeToSleepHibernField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolError ToolErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature ActualTemp {
            get {
                return this.ActualTempField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualTempField, value) != true)) {
                    this.ActualTempField = value;
                    this.RaisePropertyChanged("ActualTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ConnectedTool {
            get {
                return this.ConnectedToolField;
            }
            set {
                if ((this.ConnectedToolField.Equals(value) != true)) {
                    this.ConnectedToolField = value;
                    this.RaisePropertyChanged("ConnectedTool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Desold_OnOff {
            get {
                return this.Desold_OnOffField;
            }
            set {
                if ((this.Desold_OnOffField.Equals(value) != true)) {
                    this.Desold_OnOffField = value;
                    this.RaisePropertyChanged("Desold_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Extractor_OnOff {
            get {
                return this.Extractor_OnOffField;
            }
            set {
                if ((this.Extractor_OnOffField.Equals(value) != true)) {
                    this.Extractor_OnOffField = value;
                    this.RaisePropertyChanged("Extractor_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FutureMode {
            get {
                return this.FutureModeField;
            }
            set {
                if ((object.ReferenceEquals(this.FutureModeField, value) != true)) {
                    this.FutureModeField = value;
                    this.RaisePropertyChanged("FutureMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Hiber_OnOff {
            get {
                return this.Hiber_OnOffField;
            }
            set {
                if ((this.Hiber_OnOffField.Equals(value) != true)) {
                    this.Hiber_OnOffField = value;
                    this.RaisePropertyChanged("Hiber_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_PeripheralInfo[] Peripheral {
            get {
                return this.PeripheralField;
            }
            set {
                if ((object.ReferenceEquals(this.PeripheralField, value) != true)) {
                    this.PeripheralField = value;
                    this.RaisePropertyChanged("Peripheral");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature PortSelectedTemp {
            get {
                return this.PortSelectedTempField;
            }
            set {
                if ((object.ReferenceEquals(this.PortSelectedTempField, value) != true)) {
                    this.PortSelectedTempField = value;
                    this.RaisePropertyChanged("PortSelectedTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Power_x_Mil {
            get {
                return this.Power_x_MilField;
            }
            set {
                if ((this.Power_x_MilField.Equals(value) != true)) {
                    this.Power_x_MilField = value;
                    this.RaisePropertyChanged("Power_x_Mil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Sleep_OnOff {
            get {
                return this.Sleep_OnOffField;
            }
            set {
                if ((this.Sleep_OnOffField.Equals(value) != true)) {
                    this.Sleep_OnOffField = value;
                    this.RaisePropertyChanged("Sleep_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Stand_OnOff {
            get {
                return this.Stand_OnOffField;
            }
            set {
                if ((this.Stand_OnOffField.Equals(value) != true)) {
                    this.Stand_OnOffField = value;
                    this.RaisePropertyChanged("Stand_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusRemoteMode_Desold_OnOff {
            get {
                return this.StatusRemoteMode_Desold_OnOffField;
            }
            set {
                if ((this.StatusRemoteMode_Desold_OnOffField.Equals(value) != true)) {
                    this.StatusRemoteMode_Desold_OnOffField = value;
                    this.RaisePropertyChanged("StatusRemoteMode_Desold_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusRemoteMode_Extractor_OnOff {
            get {
                return this.StatusRemoteMode_Extractor_OnOffField;
            }
            set {
                if ((this.StatusRemoteMode_Extractor_OnOffField.Equals(value) != true)) {
                    this.StatusRemoteMode_Extractor_OnOffField = value;
                    this.RaisePropertyChanged("StatusRemoteMode_Extractor_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StatusRemoteMode_Sleep_OnOff {
            get {
                return this.StatusRemoteMode_Sleep_OnOffField;
            }
            set {
                if ((this.StatusRemoteMode_Sleep_OnOffField.Equals(value) != true)) {
                    this.StatusRemoteMode_Sleep_OnOffField = value;
                    this.RaisePropertyChanged("StatusRemoteMode_Sleep_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature Temp_MOS {
            get {
                return this.Temp_MOSField;
            }
            set {
                if ((object.ReferenceEquals(this.Temp_MOSField, value) != true)) {
                    this.Temp_MOSField = value;
                    this.RaisePropertyChanged("Temp_MOS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_PortToolSettings This_PortToolSettings {
            get {
                return this.This_PortToolSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.This_PortToolSettingsField, value) != true)) {
                    this.This_PortToolSettingsField = value;
                    this.RaisePropertyChanged("This_PortToolSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeToSleepHibern {
            get {
                return this.TimeToSleepHibernField;
            }
            set {
                if ((this.TimeToSleepHibernField.Equals(value) != true)) {
                    this.TimeToSleepHibernField = value;
                    this.RaisePropertyChanged("TimeToSleepHibern");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolError ToolError {
            get {
                return this.ToolErrorField;
            }
            set {
                if ((this.ToolErrorField.Equals(value) != true)) {
                    this.ToolErrorField = value;
                    this.RaisePropertyChanged("ToolError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr {
            get {
                return this.portNbrField;
            }
            set {
                if ((this.portNbrField.Equals(value) != true)) {
                    this.portNbrField = value;
                    this.RaisePropertyChanged("portNbr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_PortToolSettings", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_PortToolSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature AdjustTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_Cartridge CartridgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature FixedTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff FixedTemp_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeHibernation HiberTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HiberTimeOnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_Levels LevelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature SleepTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeSleep SleepTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff SleepTimeOnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature AdjustTemp {
            get {
                return this.AdjustTempField;
            }
            set {
                if ((object.ReferenceEquals(this.AdjustTempField, value) != true)) {
                    this.AdjustTempField = value;
                    this.RaisePropertyChanged("AdjustTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_Cartridge Cartridge {
            get {
                return this.CartridgeField;
            }
            set {
                if ((object.ReferenceEquals(this.CartridgeField, value) != true)) {
                    this.CartridgeField = value;
                    this.RaisePropertyChanged("Cartridge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature FixedTemp {
            get {
                return this.FixedTempField;
            }
            set {
                if ((object.ReferenceEquals(this.FixedTempField, value) != true)) {
                    this.FixedTempField = value;
                    this.RaisePropertyChanged("FixedTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff FixedTemp_OnOff {
            get {
                return this.FixedTemp_OnOffField;
            }
            set {
                if ((this.FixedTemp_OnOffField.Equals(value) != true)) {
                    this.FixedTemp_OnOffField = value;
                    this.RaisePropertyChanged("FixedTemp_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeHibernation HiberTime {
            get {
                return this.HiberTimeField;
            }
            set {
                if ((this.HiberTimeField.Equals(value) != true)) {
                    this.HiberTimeField = value;
                    this.RaisePropertyChanged("HiberTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HiberTimeOnOff {
            get {
                return this.HiberTimeOnOffField;
            }
            set {
                if ((this.HiberTimeOnOffField.Equals(value) != true)) {
                    this.HiberTimeOnOffField = value;
                    this.RaisePropertyChanged("HiberTimeOnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_Levels Levels {
            get {
                return this.LevelsField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsField, value) != true)) {
                    this.LevelsField = value;
                    this.RaisePropertyChanged("Levels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature SleepTemp {
            get {
                return this.SleepTempField;
            }
            set {
                if ((object.ReferenceEquals(this.SleepTempField, value) != true)) {
                    this.SleepTempField = value;
                    this.RaisePropertyChanged("SleepTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeSleep SleepTime {
            get {
                return this.SleepTimeField;
            }
            set {
                if ((this.SleepTimeField.Equals(value) != true)) {
                    this.SleepTimeField = value;
                    this.RaisePropertyChanged("SleepTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff SleepTimeOnOff {
            get {
                return this.SleepTimeOnOffField;
            }
            set {
                if ((this.SleepTimeOnOffField.Equals(value) != true)) {
                    this.SleepTimeOnOffField = value;
                    this.RaisePropertyChanged("SleepTimeOnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools Tool {
            get {
                return this.ToolField;
            }
            set {
                if ((this.ToolField.Equals(value) != true)) {
                    this.ToolField = value;
                    this.RaisePropertyChanged("Tool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr {
            get {
                return this.portNbrField;
            }
            set {
                if ((this.portNbrField.Equals(value) != true)) {
                    this.portNbrField = value;
                    this.RaisePropertyChanged("portNbr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_ToolError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_ToolError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SHORTCIRCUIT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SHORTCIRCUIT_NR = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPENCIRCUIT = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOTOOL = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONGTOOL = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DETECTIONTOOL = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MAXPOWER = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STOPOVERLOAD_MOS = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AIR_PUMP_ERROR = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROTECION_TC_HIGH = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGULATION_TC_HIGH = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXTERNAL_TC_MISSING = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SELECTED_TEMP_NOT_REACHED = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIGH_HEATER_INTENSITY = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOW_HEATER_RESISTANCE = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WRONG_HEATER = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOTOOL_HA = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DETECTIONTOOL_HA = 30,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Cartridge", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Cartridge : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort CartridgeNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff CartridgeOnOffField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort CartridgeNbr {
            get {
                return this.CartridgeNbrField;
            }
            set {
                if ((this.CartridgeNbrField.Equals(value) != true)) {
                    this.CartridgeNbrField = value;
                    this.RaisePropertyChanged("CartridgeNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff CartridgeOnOff {
            get {
                return this.CartridgeOnOffField;
            }
            set {
                if ((this.CartridgeOnOffField.Equals(value) != true)) {
                    this.CartridgeOnOffField = value;
                    this.RaisePropertyChanged("CartridgeOnOff");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Levels", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Levels : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature[] LevelsTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff[] LevelsTempOnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte LevelsTempSelectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LevelsCount {
            get {
                return this.LevelsCountField;
            }
            set {
                if ((this.LevelsCountField.Equals(value) != true)) {
                    this.LevelsCountField = value;
                    this.RaisePropertyChanged("LevelsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff {
            get {
                return this.LevelsOnOffField;
            }
            set {
                if ((this.LevelsOnOffField.Equals(value) != true)) {
                    this.LevelsOnOffField = value;
                    this.RaisePropertyChanged("LevelsOnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature[] LevelsTemp {
            get {
                return this.LevelsTempField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsTempField, value) != true)) {
                    this.LevelsTempField = value;
                    this.RaisePropertyChanged("LevelsTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff[] LevelsTempOnOff {
            get {
                return this.LevelsTempOnOffField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsTempOnOffField, value) != true)) {
                    this.LevelsTempOnOffField = value;
                    this.RaisePropertyChanged("LevelsTempOnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte LevelsTempSelect {
            get {
                return this.LevelsTempSelectField;
            }
            set {
                if ((this.LevelsTempSelectField.Equals(value) != true)) {
                    this.LevelsTempSelectField = value;
                    this.RaisePropertyChanged("LevelsTempSelect");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_TimeHibernation", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_TimeHibernation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_0 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_5 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_10 = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_15 = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_20 = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_25 = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_30 = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_35 = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_40 = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_45 = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_50 = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_55 = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_60 = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_HIBERNATION = 65535,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_TimeSleep", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_TimeSleep : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_0 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_1 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_2 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_3 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_4 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_5 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_6 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_7 = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_8 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MINUTE_9 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_SLEEP = 65535,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_StatusTool_HA", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_StatusTool_HA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature ActualExtTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature ActualTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ConnectedToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff CoolingStatus_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Flow_x_MilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HeaterRequestedStatus_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HeaterStatus_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PedalConnected_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PedalStatus_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature PortSelectedExtTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortSelectedFlow_x_milField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature PortSelectedTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Power_x_MilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature ProtectionTC_TempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Stand_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff SuctionRequestedStatus_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff SuctionStatus_OnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_PortToolSettings_HA This_PortToolSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeToStopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolError ToolErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature ActualExtTemp {
            get {
                return this.ActualExtTempField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualExtTempField, value) != true)) {
                    this.ActualExtTempField = value;
                    this.RaisePropertyChanged("ActualExtTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature ActualTemp {
            get {
                return this.ActualTempField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualTempField, value) != true)) {
                    this.ActualTempField = value;
                    this.RaisePropertyChanged("ActualTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ConnectedTool {
            get {
                return this.ConnectedToolField;
            }
            set {
                if ((this.ConnectedToolField.Equals(value) != true)) {
                    this.ConnectedToolField = value;
                    this.RaisePropertyChanged("ConnectedTool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff CoolingStatus_OnOff {
            get {
                return this.CoolingStatus_OnOffField;
            }
            set {
                if ((this.CoolingStatus_OnOffField.Equals(value) != true)) {
                    this.CoolingStatus_OnOffField = value;
                    this.RaisePropertyChanged("CoolingStatus_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Flow_x_Mil {
            get {
                return this.Flow_x_MilField;
            }
            set {
                if ((this.Flow_x_MilField.Equals(value) != true)) {
                    this.Flow_x_MilField = value;
                    this.RaisePropertyChanged("Flow_x_Mil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HeaterRequestedStatus_OnOff {
            get {
                return this.HeaterRequestedStatus_OnOffField;
            }
            set {
                if ((this.HeaterRequestedStatus_OnOffField.Equals(value) != true)) {
                    this.HeaterRequestedStatus_OnOffField = value;
                    this.RaisePropertyChanged("HeaterRequestedStatus_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HeaterStatus_OnOff {
            get {
                return this.HeaterStatus_OnOffField;
            }
            set {
                if ((this.HeaterStatus_OnOffField.Equals(value) != true)) {
                    this.HeaterStatus_OnOffField = value;
                    this.RaisePropertyChanged("HeaterStatus_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PedalConnected_OnOff {
            get {
                return this.PedalConnected_OnOffField;
            }
            set {
                if ((this.PedalConnected_OnOffField.Equals(value) != true)) {
                    this.PedalConnected_OnOffField = value;
                    this.RaisePropertyChanged("PedalConnected_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PedalStatus_OnOff {
            get {
                return this.PedalStatus_OnOffField;
            }
            set {
                if ((this.PedalStatus_OnOffField.Equals(value) != true)) {
                    this.PedalStatus_OnOffField = value;
                    this.RaisePropertyChanged("PedalStatus_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature PortSelectedExtTemp {
            get {
                return this.PortSelectedExtTempField;
            }
            set {
                if ((object.ReferenceEquals(this.PortSelectedExtTempField, value) != true)) {
                    this.PortSelectedExtTempField = value;
                    this.RaisePropertyChanged("PortSelectedExtTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PortSelectedFlow_x_mil {
            get {
                return this.PortSelectedFlow_x_milField;
            }
            set {
                if ((this.PortSelectedFlow_x_milField.Equals(value) != true)) {
                    this.PortSelectedFlow_x_milField = value;
                    this.RaisePropertyChanged("PortSelectedFlow_x_mil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature PortSelectedTemp {
            get {
                return this.PortSelectedTempField;
            }
            set {
                if ((object.ReferenceEquals(this.PortSelectedTempField, value) != true)) {
                    this.PortSelectedTempField = value;
                    this.RaisePropertyChanged("PortSelectedTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Power_x_Mil {
            get {
                return this.Power_x_MilField;
            }
            set {
                if ((this.Power_x_MilField.Equals(value) != true)) {
                    this.Power_x_MilField = value;
                    this.RaisePropertyChanged("Power_x_Mil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature ProtectionTC_Temp {
            get {
                return this.ProtectionTC_TempField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtectionTC_TempField, value) != true)) {
                    this.ProtectionTC_TempField = value;
                    this.RaisePropertyChanged("ProtectionTC_Temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Stand_OnOff {
            get {
                return this.Stand_OnOffField;
            }
            set {
                if ((this.Stand_OnOffField.Equals(value) != true)) {
                    this.Stand_OnOffField = value;
                    this.RaisePropertyChanged("Stand_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff SuctionRequestedStatus_OnOff {
            get {
                return this.SuctionRequestedStatus_OnOffField;
            }
            set {
                if ((this.SuctionRequestedStatus_OnOffField.Equals(value) != true)) {
                    this.SuctionRequestedStatus_OnOffField = value;
                    this.RaisePropertyChanged("SuctionRequestedStatus_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff SuctionStatus_OnOff {
            get {
                return this.SuctionStatus_OnOffField;
            }
            set {
                if ((this.SuctionStatus_OnOffField.Equals(value) != true)) {
                    this.SuctionStatus_OnOffField = value;
                    this.RaisePropertyChanged("SuctionStatus_OnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_PortToolSettings_HA This_PortToolSettings {
            get {
                return this.This_PortToolSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.This_PortToolSettingsField, value) != true)) {
                    this.This_PortToolSettingsField = value;
                    this.RaisePropertyChanged("This_PortToolSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeToStop {
            get {
                return this.TimeToStopField;
            }
            set {
                if ((this.TimeToStopField.Equals(value) != true)) {
                    this.TimeToStopField = value;
                    this.RaisePropertyChanged("TimeToStop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolError ToolError {
            get {
                return this.ToolErrorField;
            }
            set {
                if ((this.ToolErrorField.Equals(value) != true)) {
                    this.ToolErrorField = value;
                    this.RaisePropertyChanged("ToolError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr {
            get {
                return this.portNbrField;
            }
            set {
                if ((this.portNbrField.Equals(value) != true)) {
                    this.portNbrField = value;
                    this.RaisePropertyChanged("portNbr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_PortToolSettings_HA", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_PortToolSettings_HA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature AdjustTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ExternalTCMode_HA ExternalTCModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_Levels_HA LevelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PortProfileModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PedalAction StartMode_PedalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StartMode_StandOutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StartMode_ToolButtonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeToStopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools ToolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature AdjustTemp {
            get {
                return this.AdjustTempField;
            }
            set {
                if ((object.ReferenceEquals(this.AdjustTempField, value) != true)) {
                    this.AdjustTempField = value;
                    this.RaisePropertyChanged("AdjustTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ExternalTCMode_HA ExternalTCMode {
            get {
                return this.ExternalTCModeField;
            }
            set {
                if ((this.ExternalTCModeField.Equals(value) != true)) {
                    this.ExternalTCModeField = value;
                    this.RaisePropertyChanged("ExternalTCMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_Levels_HA Levels {
            get {
                return this.LevelsField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsField, value) != true)) {
                    this.LevelsField = value;
                    this.RaisePropertyChanged("Levels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PortProfileMode {
            get {
                return this.PortProfileModeField;
            }
            set {
                if ((this.PortProfileModeField.Equals(value) != true)) {
                    this.PortProfileModeField = value;
                    this.RaisePropertyChanged("PortProfileMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PedalAction StartMode_Pedal {
            get {
                return this.StartMode_PedalField;
            }
            set {
                if ((this.StartMode_PedalField.Equals(value) != true)) {
                    this.StartMode_PedalField = value;
                    this.RaisePropertyChanged("StartMode_Pedal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StartMode_StandOut {
            get {
                return this.StartMode_StandOutField;
            }
            set {
                if ((this.StartMode_StandOutField.Equals(value) != true)) {
                    this.StartMode_StandOutField = value;
                    this.RaisePropertyChanged("StartMode_StandOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StartMode_ToolButton {
            get {
                return this.StartMode_ToolButtonField;
            }
            set {
                if ((this.StartMode_ToolButtonField.Equals(value) != true)) {
                    this.StartMode_ToolButtonField = value;
                    this.RaisePropertyChanged("StartMode_ToolButton");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeToStop {
            get {
                return this.TimeToStopField;
            }
            set {
                if ((this.TimeToStopField.Equals(value) != true)) {
                    this.TimeToStopField = value;
                    this.RaisePropertyChanged("TimeToStop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools Tool {
            get {
                return this.ToolField;
            }
            set {
                if ((this.ToolField.Equals(value) != true)) {
                    this.ToolField = value;
                    this.RaisePropertyChanged("Tool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr {
            get {
                return this.portNbrField;
            }
            set {
                if ((this.portNbrField.Equals(value) != true)) {
                    this.portNbrField = value;
                    this.RaisePropertyChanged("portNbr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Levels_HA", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Levels_HA : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelsCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature[] LevelsExtTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] LevelsFlowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature[] LevelsTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff[] LevelsTempOnOffField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte LevelsTempSelectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LevelsCount {
            get {
                return this.LevelsCountField;
            }
            set {
                if ((this.LevelsCountField.Equals(value) != true)) {
                    this.LevelsCountField = value;
                    this.RaisePropertyChanged("LevelsCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature[] LevelsExtTemp {
            get {
                return this.LevelsExtTempField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsExtTempField, value) != true)) {
                    this.LevelsExtTempField = value;
                    this.RaisePropertyChanged("LevelsExtTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] LevelsFlow {
            get {
                return this.LevelsFlowField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsFlowField, value) != true)) {
                    this.LevelsFlowField = value;
                    this.RaisePropertyChanged("LevelsFlow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff {
            get {
                return this.LevelsOnOffField;
            }
            set {
                if ((this.LevelsOnOffField.Equals(value) != true)) {
                    this.LevelsOnOffField = value;
                    this.RaisePropertyChanged("LevelsOnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature[] LevelsTemp {
            get {
                return this.LevelsTempField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsTempField, value) != true)) {
                    this.LevelsTempField = value;
                    this.RaisePropertyChanged("LevelsTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff[] LevelsTempOnOff {
            get {
                return this.LevelsTempOnOffField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsTempOnOffField, value) != true)) {
                    this.LevelsTempOnOffField = value;
                    this.RaisePropertyChanged("LevelsTempOnOff");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte LevelsTempSelect {
            get {
                return this.LevelsTempSelectField;
            }
            set {
                if ((this.LevelsTempSelectField.Equals(value) != true)) {
                    this.LevelsTempSelectField = value;
                    this.RaisePropertyChanged("LevelsTempSelect");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_ExternalTCMode_HA", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_ExternalTCMode_HA : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGULATION = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PROTECTION = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_PedalAction", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_PedalAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PULSE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HOLD_DOWN = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Station_Sold_Settings", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Station_Sold_Settings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff BeepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HelpTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Idioma IdiomaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MaxTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MinTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff N2ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PowerLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Beep {
            get {
                return this.BeepField;
            }
            set {
                if ((this.BeepField.Equals(value) != true)) {
                    this.BeepField = value;
                    this.RaisePropertyChanged("Beep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff HelpText {
            get {
                return this.HelpTextField;
            }
            set {
                if ((this.HelpTextField.Equals(value) != true)) {
                    this.HelpTextField = value;
                    this.RaisePropertyChanged("HelpText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Idioma Idioma {
            get {
                return this.IdiomaField;
            }
            set {
                if ((this.IdiomaField.Equals(value) != true)) {
                    this.IdiomaField = value;
                    this.RaisePropertyChanged("Idioma");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MaxTemp {
            get {
                return this.MaxTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MaxTempField, value) != true)) {
                    this.MaxTempField = value;
                    this.RaisePropertyChanged("MaxTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MinTemp {
            get {
                return this.MinTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MinTempField, value) != true)) {
                    this.MinTempField = value;
                    this.RaisePropertyChanged("MinTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff N2Mode {
            get {
                return this.N2ModeField;
            }
            set {
                if ((this.N2ModeField.Equals(value) != true)) {
                    this.N2ModeField = value;
                    this.RaisePropertyChanged("N2Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PIN {
            get {
                return this.PINField;
            }
            set {
                if ((object.ReferenceEquals(this.PINField, value) != true)) {
                    this.PINField = value;
                    this.RaisePropertyChanged("PIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PowerLimit {
            get {
                return this.PowerLimitField;
            }
            set {
                if ((this.PowerLimitField.Equals(value) != true)) {
                    this.PowerLimitField = value;
                    this.RaisePropertyChanged("PowerLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_Idioma", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_Idioma : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Ingles = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Espanol = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Frances = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Aleman = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Italiano = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Portugues = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Chino = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Japones = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Coreano = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        I_Ruso = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Station_HA_Settings", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Station_HA_Settings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff BeepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Idioma IdiomaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MaxExtTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxFlowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MaxTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MinExtTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinFlowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_getTemperature MinTempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PINField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PINEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StationLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Beep {
            get {
                return this.BeepField;
            }
            set {
                if ((this.BeepField.Equals(value) != true)) {
                    this.BeepField = value;
                    this.RaisePropertyChanged("Beep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Idioma Idioma {
            get {
                return this.IdiomaField;
            }
            set {
                if ((this.IdiomaField.Equals(value) != true)) {
                    this.IdiomaField = value;
                    this.RaisePropertyChanged("Idioma");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MaxExtTemp {
            get {
                return this.MaxExtTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MaxExtTempField, value) != true)) {
                    this.MaxExtTempField = value;
                    this.RaisePropertyChanged("MaxExtTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxFlow {
            get {
                return this.MaxFlowField;
            }
            set {
                if ((this.MaxFlowField.Equals(value) != true)) {
                    this.MaxFlowField = value;
                    this.RaisePropertyChanged("MaxFlow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MaxTemp {
            get {
                return this.MaxTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MaxTempField, value) != true)) {
                    this.MaxTempField = value;
                    this.RaisePropertyChanged("MaxTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MinExtTemp {
            get {
                return this.MinExtTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MinExtTempField, value) != true)) {
                    this.MinExtTempField = value;
                    this.RaisePropertyChanged("MinExtTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinFlow {
            get {
                return this.MinFlowField;
            }
            set {
                if ((this.MinFlowField.Equals(value) != true)) {
                    this.MinFlowField = value;
                    this.RaisePropertyChanged("MinFlow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_getTemperature MinTemp {
            get {
                return this.MinTempField;
            }
            set {
                if ((object.ReferenceEquals(this.MinTempField, value) != true)) {
                    this.MinTempField = value;
                    this.RaisePropertyChanged("MinTemp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PIN {
            get {
                return this.PINField;
            }
            set {
                if ((object.ReferenceEquals(this.PINField, value) != true)) {
                    this.PINField = value;
                    this.RaisePropertyChanged("PIN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff PINEnabled {
            get {
                return this.PINEnabledField;
            }
            set {
                if ((this.PINEnabledField.Equals(value) != true)) {
                    this.PINEnabledField = value;
                    this.RaisePropertyChanged("PINEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff StationLocked {
            get {
                return this.StationLockedField;
            }
            set {
                if ((this.StationLockedField.Equals(value) != true)) {
                    this.StationLockedField = value;
                    this.RaisePropertyChanged("StationLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitField, value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_EnumConstJBC.dc_ToolTemperatureLevels", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
    public enum dc_EnumConstJBCdc_ToolTemperatureLevels : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NO_LEVELS = 255,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIRST_LEVEL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SECOND_LEVEL = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        THIRD_LEVEL = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Port_Counters", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Port_Counters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_Counters GlobalCountersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_Counters PartialCountersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_Counters GlobalCounters {
            get {
                return this.GlobalCountersField;
            }
            set {
                if ((object.ReferenceEquals(this.GlobalCountersField, value) != true)) {
                    this.GlobalCountersField = value;
                    this.RaisePropertyChanged("GlobalCounters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_Counters PartialCounters {
            get {
                return this.PartialCountersField;
            }
            set {
                if ((object.ReferenceEquals(this.PartialCountersField, value) != true)) {
                    this.PartialCountersField = value;
                    this.RaisePropertyChanged("PartialCounters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr {
            get {
                return this.portNbrField;
            }
            set {
                if ((this.portNbrField.Equals(value) != true)) {
                    this.portNbrField = value;
                    this.RaisePropertyChanged("portNbr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="dc_Counters", Namespace="http://schemas.datacontract.org/2004/07/JBCStationControllerSrv")]
    [System.SerializableAttribute()]
    public partial class dc_Counters : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContDesoldCyclesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContHiberMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContIdleMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContPlugMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContSleepCyclesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContSleepMinutesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContSuctionCyclesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContWorkCyclesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContWorkMinutesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContDesoldCycles {
            get {
                return this.ContDesoldCyclesField;
            }
            set {
                if ((this.ContDesoldCyclesField.Equals(value) != true)) {
                    this.ContDesoldCyclesField = value;
                    this.RaisePropertyChanged("ContDesoldCycles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContHiberMinutes {
            get {
                return this.ContHiberMinutesField;
            }
            set {
                if ((this.ContHiberMinutesField.Equals(value) != true)) {
                    this.ContHiberMinutesField = value;
                    this.RaisePropertyChanged("ContHiberMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContIdleMinutes {
            get {
                return this.ContIdleMinutesField;
            }
            set {
                if ((this.ContIdleMinutesField.Equals(value) != true)) {
                    this.ContIdleMinutesField = value;
                    this.RaisePropertyChanged("ContIdleMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContPlugMinutes {
            get {
                return this.ContPlugMinutesField;
            }
            set {
                if ((this.ContPlugMinutesField.Equals(value) != true)) {
                    this.ContPlugMinutesField = value;
                    this.RaisePropertyChanged("ContPlugMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContSleepCycles {
            get {
                return this.ContSleepCyclesField;
            }
            set {
                if ((this.ContSleepCyclesField.Equals(value) != true)) {
                    this.ContSleepCyclesField = value;
                    this.RaisePropertyChanged("ContSleepCycles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContSleepMinutes {
            get {
                return this.ContSleepMinutesField;
            }
            set {
                if ((this.ContSleepMinutesField.Equals(value) != true)) {
                    this.ContSleepMinutesField = value;
                    this.RaisePropertyChanged("ContSleepMinutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContSuctionCycles {
            get {
                return this.ContSuctionCyclesField;
            }
            set {
                if ((this.ContSuctionCyclesField.Equals(value) != true)) {
                    this.ContSuctionCyclesField = value;
                    this.RaisePropertyChanged("ContSuctionCycles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContWorkCycles {
            get {
                return this.ContWorkCyclesField;
            }
            set {
                if ((this.ContWorkCyclesField.Equals(value) != true)) {
                    this.ContWorkCyclesField = value;
                    this.RaisePropertyChanged("ContWorkCycles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContWorkMinutes {
            get {
                return this.ContWorkMinutesField;
            }
            set {
                if ((this.ContWorkMinutesField.Equals(value) != true)) {
                    this.ContWorkMinutesField = value;
                    this.RaisePropertyChanged("ContWorkMinutes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://JBCStationControllerSrv", ConfigurationName="JBCService.IJBCStationControllerService")]
    public interface IJBCStationControllerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeData" +
            "Count", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeData" +
            "CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeData" +
            "CountfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        int GetContinuousModeDataCount(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeData" +
            "Count", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeData" +
            "CountResponse")]
        System.Threading.Tasks.Task<int> GetContinuousModeDataCountAsync(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartContinuousModeRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartContinuousModefa" +
            "ultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        uint StartContinuousMode(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartContinuousModeRe" +
            "sponse")]
        System.Threading.Tasks.Task<uint> StartContinuousModeAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopContinuousModeRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopContinuousModefau" +
            "ltErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StopContinuousMode(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopContinuousModeRes" +
            "ponse")]
        System.Threading.Tasks.Task StopContinuousModeAsync(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DatafaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_ContinuousModeData GetContinuousModeNextData(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData> GetContinuousModeNextDataAsync(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data_HAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data_HAfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA GetContinuousModeNextData_HA(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "Data_HAResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA> GetContinuousModeNextData_HAAsync(long stationID, uint traceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunkResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunkfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_ContinuousModeData[] GetContinuousModeNextDataChunk(long stationID, uint traceID, int iChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunkResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData[]> GetContinuousModeNextDataChunkAsync(long stationID, uint traceID, int iChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk_HAResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk_HAfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA[] GetContinuousModeNextDataChunk_HA(long stationID, uint traceID, int iChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeNext" +
            "DataChunk_HAResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA[]> GetContinuousModeNextDataChunk_HAAsync(long stationID, uint traceID, int iChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetContinuousModeResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetContinuousModefaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetContinuousMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_SpeedContinuousMode Speed, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portA, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portB, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portC, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetContinuousModeResp" +
            "onse")]
        System.Threading.Tasks.Task SetContinuousModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_SpeedContinuousMode Speed, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portA, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portB, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portC, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetEthernetConfigurat" +
            "ion", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetEthernetConfigurat" +
            "ionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetEthernetConfigurat" +
            "ionfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_EthernetConfiguration GetEthernetConfiguration(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetEthernetConfigurat" +
            "ion", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetEthernetConfigurat" +
            "ionResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_EthernetConfiguration> GetEthernetConfigurationAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetRobotConfiguration" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetRobotConfiguration" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetRobotConfiguration" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_RobotConfiguration GetRobotConfiguration(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetRobotConfiguration" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetRobotConfiguration" +
            "Response")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_RobotConfiguration> GetRobotConfigurationAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetEthernetConfigurat" +
            "ion", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetEthernetConfigurat" +
            "ionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetEthernetConfigurat" +
            "ionfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetEthernetConfiguration(long stationID, JBC_ConnectRemote.JBCService.dc_EthernetConfiguration ethernetConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetEthernetConfigurat" +
            "ion", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetEthernetConfigurat" +
            "ionResponse")]
        System.Threading.Tasks.Task SetEthernetConfigurationAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EthernetConfiguration ethernetConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetRobotConfiguration" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetRobotConfiguration" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetRobotConfiguration" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetRobotConfiguration(long stationID, JBC_ConnectRemote.JBCService.dc_RobotConfiguration robotConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetRobotConfiguration" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetRobotConfiguration" +
            "Response")]
        System.Threading.Tasks.Task SetRobotConfigurationAsync(long stationID, JBC_ConnectRemote.JBCService.dc_RobotConfiguration robotConfiguration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllPeripheralInfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllPeripheralInfoR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllPeripheralInfof" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_PeripheralInfo[] GetAllPeripheralInfo(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllPeripheralInfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllPeripheralInfoR" +
            "esponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_PeripheralInfo[]> GetAllPeripheralInfoAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPeripheralInfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPeripheralInfoResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPeripheralInfofaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPeripheralInfo(long stationID, JBC_ConnectRemote.JBCService.dc_PeripheralInfo peripheralInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPeripheralInfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPeripheralInfoResp" +
            "onse")]
        System.Threading.Tasks.Task SetPeripheralInfoAsync(long stationID, JBC_ConnectRemote.JBCService.dc_PeripheralInfo peripheralInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllProfiles_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllProfiles_HAResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllProfiles_HAfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Profile_HA[] GetAllProfiles_HA(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllProfiles_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetAllProfiles_HAResp" +
            "onse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Profile_HA[]> GetAllProfiles_HAAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetSelectedProfile_HA" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetSelectedProfile_HA" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetSelectedProfile_HA" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        string GetSelectedProfile_HA(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetSelectedProfile_HA" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetSelectedProfile_HA" +
            "Response")]
        System.Threading.Tasks.Task<string> GetSelectedProfile_HAAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetProfile_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetProfile_HAResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetProfile_HAfaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetProfile_HA(long stationID, JBC_ConnectRemote.JBCService.dc_Profile_HA profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetProfile_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetProfile_HAResponse" +
            "")]
        System.Threading.Tasks.Task SetProfile_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_Profile_HA profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteProfile_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteProfile_HARespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteProfile_HAfault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void DeleteProfile_HA(long stationID, string profileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteProfile_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteProfile_HARespo" +
            "nse")]
        System.Threading.Tasks.Task DeleteProfile_HAAsync(long stationID, string profileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SyncProfiles_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SyncProfiles_HARespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SyncProfiles_HAfaultE" +
            "rrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SyncProfiles_HA(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SyncProfiles_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SyncProfiles_HARespon" +
            "se")]
        System.Threading.Tasks.Task SyncProfiles_HAAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetTransaction", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetTransactionRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetTransactionfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        uint SetTransaction(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetTransaction", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetTransactionRespons" +
            "e")]
        System.Threading.Tasks.Task<uint> SetTransactionAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/QueryEndedTransaction" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/QueryEndedTransaction" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/QueryEndedTransaction" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        bool QueryEndedTransaction(long stationID, uint transactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/QueryEndedTransaction" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/QueryEndedTransaction" +
            "Response")]
        System.Threading.Tasks.Task<bool> QueryEndedTransactionAsync(long stationID, uint transactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetDefaultStationPara" +
            "ms", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetDefaultStationPara" +
            "msResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetDefaultStationPara" +
            "msfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetDefaultStationParams(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetDefaultStationPara" +
            "ms", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetDefaultStationPara" +
            "msResponse")]
        System.Threading.Tasks.Task SetDefaultStationParamsAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ResetStation", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ResetStationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/ResetStationfaultErro" +
            "rFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void ResetStation(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ResetStation", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ResetStationResponse")]
        System.Threading.Tasks.Task ResetStationAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListUpdatin" +
            "g", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListUpdatin" +
            "gResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListUpdatin" +
            "gfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        long[] GetStationListUpdating();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListUpdatin" +
            "g", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListUpdatin" +
            "gResponse")]
        System.Threading.Tasks.Task<long[]> GetStationListUpdatingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/UpdateStations", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/UpdateStationsRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/UpdateStationsfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void UpdateStations(JBC_ConnectRemote.JBCService.dc_FirmwareStation[] listStationsToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/UpdateStations", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/UpdateStationsRespons" +
            "e")]
        System.Threading.Tasks.Task UpdateStationsAsync(JBC_ConnectRemote.JBCService.dc_FirmwareStation[] listStationsToUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/LockStation", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/LockStationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/LockStationfaultError" +
            "Fault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void LockStation(string stationUID, uint timeout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/LockStation", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/LockStationResponse")]
        System.Threading.Tasks.Task LockStationAsync(string stationUID, uint timeout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeactivatePortStation" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeactivatePortStation" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeactivatePortStation" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void DeactivatePortStation(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeactivatePortStation" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeactivatePortStation" +
            "Response")]
        System.Threading.Tasks.Task DeactivatePortStationAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowMessage", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ShowMessageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowMessagefaultError" +
            "Fault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void ShowMessage(long stationID, string message, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_MessageType messageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowMessage", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ShowMessageResponse")]
        System.Threading.Tasks.Task ShowMessageAsync(long stationID, string message, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_MessageType messageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceability", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceabilityResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceabilityfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StartTraceability(System.Uri uriTraceManager, string ServerCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceability", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceabilityResp" +
            "onse")]
        System.Threading.Tasks.Task StartTraceabilityAsync(System.Uri uriTraceManager, string ServerCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceability", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceabilityRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceabilityfault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StopTraceability();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceability", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceabilityRespo" +
            "nse")]
        System.Threading.Tasks.Task StopTraceabilityAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/NewUserSession", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/NewUserSessionRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/NewUserSessionfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void NewUserSession(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, long userID, string userName, string inputDeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/NewUserSession", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/NewUserSessionRespons" +
            "e")]
        System.Threading.Tasks.Task NewUserSessionAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, long userID, string userName, string inputDeviceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/CloseUserSession", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/CloseUserSessionRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/CloseUserSessionfault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void CloseUserSession(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/CloseUserSession", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/CloseUserSessionRespo" +
            "nse")]
        System.Threading.Tasks.Task CloseUserSessionAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAuthenticatedUser", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetAuthenticatedUserR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAuthenticatedUserf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        long GetAuthenticatedUser(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetAuthenticatedUser", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetAuthenticatedUserR" +
            "esponse")]
        System.Threading.Tasks.Task<long> GetAuthenticatedUserAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetDate", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetDatefaultErrorFaul" +
            "t", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        System.DateTime GetDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetDate", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetDate", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetDatefaultErrorFaul" +
            "t", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetDate(System.DateTime newDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetDate", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetDateResponse")]
        System.Threading.Tasks.Task SetDateAsync(System.DateTime newDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/AddWorkOptionDetails", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/AddWorkOptionDetailsR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/AddWorkOptionDetailsf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void AddWorkOptionDetails(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/AddWorkOptionDetails", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/AddWorkOptionDetailsR" +
            "esponse")]
        System.Threading.Tasks.Task AddWorkOptionDetailsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteWorkOptionDetai" +
            "ls", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteWorkOptionDetai" +
            "lsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteWorkOptionDetai" +
            "lsfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void DeleteWorkOptionDetails(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteWorkOptionDetai" +
            "ls", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteWorkOptionDetai" +
            "lsResponse")]
        System.Threading.Tasks.Task DeleteWorkOptionDetailsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowWorkOptionDetails" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ShowWorkOptionDetails" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowWorkOptionDetails" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void ShowWorkOptionDetails(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowWorkOptionDetails" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ShowWorkOptionDetails" +
            "Response")]
        System.Threading.Tasks.Task ShowWorkOptionDetailsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowHelpResource", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ShowHelpResourceRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowHelpResourcefault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void ShowHelpResource(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ShowHelpResource", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ShowHelpResourceRespo" +
            "nse")]
        System.Threading.Tasks.Task ShowHelpResourceAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/LoadConfigurationPort" +
            "Station", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/LoadConfigurationPort" +
            "StationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/LoadConfigurationPort" +
            "StationfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void LoadConfigurationPortStation(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_ConfigurationPortStation configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/LoadConfigurationPort" +
            "Station", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/LoadConfigurationPort" +
            "StationResponse")]
        System.Threading.Tasks.Task LoadConfigurationPortStationAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_ConfigurationPortStation configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetTraceFolder", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetTraceFolderRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetTraceFolderfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        string GetTraceFolder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetTraceFolder", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetTraceFolderRespons" +
            "e")]
        System.Threading.Tasks.Task<string> GetTraceFolderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetTraceSpeed", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetTraceSpeedResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetTraceSpeedfaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetTraceSpeed(string stationUID, JBC_ConnectRemote.JBCService.SpeedContinuousMode captureSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetTraceSpeed", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetTraceSpeedResponse" +
            "")]
        System.Threading.Tasks.Task SetTraceSpeedAsync(string stationUID, JBC_ConnectRemote.JBCService.SpeedContinuousMode captureSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTrace", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTracefaultErrorF" +
            "ault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StartTrace(string stationUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTrace", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartTraceResponse")]
        System.Threading.Tasks.Task StartTraceAsync(string stationUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTracePort", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartTracePortRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTracePortfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StartTracePort(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StartTracePort", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StartTracePortRespons" +
            "e")]
        System.Threading.Tasks.Task StartTracePortAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTrace", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTracefaultErrorFa" +
            "ult", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StopTrace(string stationUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTrace", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopTraceResponse")]
        System.Threading.Tasks.Task StopTraceAsync(string stationUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTracePort", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopTracePortResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTracePortfaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StopTracePort(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StopTracePort", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StopTracePortResponse" +
            "")]
        System.Threading.Tasks.Task StopTracePortAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetListRecordedDataFi" +
            "les", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetListRecordedDataFi" +
            "lesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetListRecordedDataFi" +
            "lesfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        string[] GetListRecordedDataFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetListRecordedDataFi" +
            "les", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetListRecordedDataFi" +
            "lesResponse")]
        System.Threading.Tasks.Task<string[]> GetListRecordedDataFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetRecordedData", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetRecordedDataRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetRecordedDatafaultE" +
            "rrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_TraceDataSequence GetRecordedData(string fileName, int nSequence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetRecordedData", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetRecordedDataRespon" +
            "se")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_TraceDataSequence> GetRecordedDataAsync(string fileName, int nSequence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteRecordedDataFil" +
            "e", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteRecordedDataFil" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteRecordedDataFil" +
            "efaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void DeleteRecordedDataFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteRecordedDataFil" +
            "e", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/DeleteRecordedDataFil" +
            "eResponse")]
        System.Threading.Tasks.Task DeleteRecordedDataFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationControllerI" +
            "nfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationControllerI" +
            "nfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationControllerI" +
            "nfofaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_StationController_Info GetStationControllerInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationControllerI" +
            "nfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationControllerI" +
            "nfoResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_StationController_Info> GetStationControllerInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerSear" +
            "ch", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerSear" +
            "chResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerSear" +
            "chfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void StationControllerSearch(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerAction action, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerSear" +
            "ch", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerSear" +
            "chResponse")]
        System.Threading.Tasks.Task StationControllerSearchAsync(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerAction action, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerIsSe" +
            "arching", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerIsSe" +
            "archingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerIsSe" +
            "archingfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        bool StationControllerIsSearching(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerIsSe" +
            "arching", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/StationControllerIsSe" +
            "archingResponse")]
        System.Threading.Tasks.Task<bool> StationControllerIsSearchingAsync(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationCount", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationCountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationCountfaultE" +
            "rrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        int GetStationCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationCount", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationCountRespon" +
            "se")]
        System.Threading.Tasks.Task<int> GetStationCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationList", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        long[] GetStationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationList", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationListRespons" +
            "e")]
        System.Threading.Tasks.Task<long[]> GetStationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationInfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationInfoRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationInfofaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Station_Sold_Info GetStationInfo(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationInfo", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationInfoRespons" +
            "e")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_Sold_Info> GetStationInfoAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatusRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatusfault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Station_Sold_Status GetStationStatus(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatusRespo" +
            "nse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_Sold_Status> GetStationStatusAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus_HARe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus_HAfa" +
            "ultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Station_HA_Status GetStationStatus_HA(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationStatus_HARe" +
            "sponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_HA_Status> GetStationStatus_HAAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetControlMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetControlModeRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetControlModefaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection GetControlMode(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetControlMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetControlModeRespons" +
            "e")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection> GetControlModeAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetControlMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetControlModeRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetControlModefaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetControlMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection mode, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetControlMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetControlModeRespons" +
            "e")]
        System.Threading.Tasks.Task SetControlModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection mode, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetRemoteMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetRemoteModeResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetRemoteModefaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetRemoteMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetRemoteMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetRemoteModeResponse" +
            "")]
        System.Threading.Tasks.Task SetRemoteModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/KeepControlMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/KeepControlModeRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/KeepControlModefaultE" +
            "rrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void KeepControlMode(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/KeepControlMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/KeepControlModeRespon" +
            "se")]
        System.Threading.Tasks.Task KeepControlModeAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatusResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatusfaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_StatusTool GetPortStatus(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatusResponse" +
            "")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_StatusTool> GetPortStatusAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus_HARespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus_HAfault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_StatusTool_HA GetPortStatus_HA(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortStatus_HARespo" +
            "nse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_StatusTool_HA> GetPortStatus_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusToolResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusToolfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortStatusTool(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff sleep, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff extractor, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff desolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusToolResp" +
            "onse")]
        System.Threading.Tasks.Task SetPortStatusToolAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff sleep, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff extractor, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff desolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool_HAR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool_HAf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortStatusTool_HA(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff heater, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff suction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortStatusTool_HAR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortStatusTool_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff heater, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff suction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettingsRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettingsfau" +
            "ltErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Station_Sold_Settings GetStationSettings(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettingsRes" +
            "ponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_Sold_Settings> GetStationSettingsAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings_HA" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings_HA" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings_HA" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Station_HA_Settings GetStationSettings_HA(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings_HA" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationSettings_HA" +
            "Response")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_HA_Settings> GetStationSettings_HAAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationPIN", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationPINResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationPINfaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        string GetStationPIN(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationPIN", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetStationPINResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetStationPINAsync(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationName", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationNameRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationNamefaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationName(long stationID, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationName", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationNameRespons" +
            "e")]
        System.Threading.Tasks.Task SetStationNameAsync(long stationID, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPIN", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINfaultErr" +
            "orFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationPIN(long stationID, string newPIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPIN", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINResponse" +
            "")]
        System.Threading.Tasks.Task SetStationPINAsync(long stationID, string newPIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationTempUnit", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationTempUnitRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationTempUnitfau" +
            "ltErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationTempUnit(long stationID, string newTempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationTempUnit", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationTempUnitRes" +
            "ponse")]
        System.Threading.Tasks.Task SetStationTempUnitAsync(long stationID, string newTempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinTempResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinTempfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationMinTemp(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinTempResp" +
            "onse")]
        System.Threading.Tasks.Task SetStationMinTempAsync(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxTempResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxTempfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationMaxTemp(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxTempResp" +
            "onse")]
        System.Threading.Tasks.Task SetStationMaxTempAsync(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationN2Mode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationN2ModeRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationN2Modefault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationN2Mode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationN2Mode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationN2ModeRespo" +
            "nse")]
        System.Threading.Tasks.Task SetStationN2ModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationHelpText", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationHelpTextRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationHelpTextfau" +
            "ltErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationHelpText(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationHelpText", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationHelpTextRes" +
            "ponse")]
        System.Threading.Tasks.Task SetStationHelpTextAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationBeep", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationBeepRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationBeepfaultEr" +
            "rorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationBeep(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationBeep", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationBeepRespons" +
            "e")]
        System.Threading.Tasks.Task SetStationBeepAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPowerLimit", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPowerLimitR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPowerLimitf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationPowerLimit(long stationID, int newPowerLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPowerLimit", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPowerLimitR" +
            "esponse")]
        System.Threading.Tasks.Task SetStationPowerLimitAsync(long stationID, int newPowerLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinExtTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinExtTempR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinExtTempf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationMinExtTemp(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinExtTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinExtTempR" +
            "esponse")]
        System.Threading.Tasks.Task SetStationMinExtTempAsync(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxExtTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxExtTempR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxExtTempf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationMaxExtTemp(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxExtTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxExtTempR" +
            "esponse")]
        System.Threading.Tasks.Task SetStationMaxExtTempAsync(long stationID, int newTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinFlow", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinFlowResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinFlowfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationMinFlow(long stationID, int newFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinFlow", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMinFlowResp" +
            "onse")]
        System.Threading.Tasks.Task SetStationMinFlowAsync(long stationID, int newFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxFlow", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxFlowResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxFlowfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationMaxFlow(long stationID, int newFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxFlow", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationMaxFlowResp" +
            "onse")]
        System.Threading.Tasks.Task SetStationMaxFlowAsync(long stationID, int newFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINEnabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINEnabledR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINEnabledf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationPINEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINEnabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationPINEnabledR" +
            "esponse")]
        System.Threading.Tasks.Task SetStationPINEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationLocked", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationLockedRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationLockedfault" +
            "ErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetStationLocked(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationLocked", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetStationLockedRespo" +
            "nse")]
        System.Threading.Tasks.Task SetStationLockedAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettingsRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettingsfa" +
            "ultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_PortToolSettings GetPortToolSettings(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettingsRe" +
            "sponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_PortToolSettings> GetPortToolSettingsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings_H" +
            "A", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings_H" +
            "AResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings_H" +
            "AfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_PortToolSettings_HA GetPortToolSettings_HA(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings_H" +
            "A", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortToolSettings_H" +
            "AResponse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_PortToolSettings_HA> GetPortToolSettings_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpStep", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpStepfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedTempStep(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpStep", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedTe" +
            "mpStepResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedTempStepAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedFl" +
            "ow", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedFl" +
            "owResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedFl" +
            "owfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedFlow(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedFl" +
            "ow", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedFl" +
            "owResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedFlowAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedExtTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedExtTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempStep", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempStepfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedExtTempStep(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempStep", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedEx" +
            "tTempStepResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedExtTempStepAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFixTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFixTempRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFixTempfau" +
            "ltErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolFixTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFixTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFixTempRes" +
            "ponse")]
        System.Threading.Tasks.Task SetPortToolFixTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevelsResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevelsfaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolLevels(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, int Level1Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, int Level2Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, int Level3Temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevelsResp" +
            "onse")]
        System.Threading.Tasks.Task SetPortToolLevelsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, int Level1Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, int Level2Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, int Level3Temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels_HAR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels_HAf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolLevels_HA(
                    long stationID, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, 
                    int Level1Temp, 
                    int Level1Flow, 
                    int Level1ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, 
                    int Level2Temp, 
                    int Level2Flow, 
                    int Level2ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, 
                    int Level3Temp, 
                    int Level3Flow, 
                    int Level3ExtTemp, 
                    string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels_HA", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolLevels_HAR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortToolLevels_HAAsync(
                    long stationID, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, 
                    int Level1Temp, 
                    int Level1Flow, 
                    int Level1ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, 
                    int Level2Temp, 
                    int Level2Flow, 
                    int Level2ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, 
                    int Level3Temp, 
                    int Level3Flow, 
                    int Level3ExtTemp, 
                    string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velEnabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velEnabledResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velEnabledfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedLevelEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velEnabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velEnabledResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedLevelEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "vel", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSelectedLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "vel", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSelectedLe" +
            "velResponse")]
        System.Threading.Tasks.Task SetPortToolSelectedLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelE" +
            "nabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelE" +
            "nabledResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelE" +
            "nabledfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolTempLevelEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelE" +
            "nabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelE" +
            "nabledResponse")]
        System.Threading.Tasks.Task SetPortToolTempLevelEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevel", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolTempLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevel", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTempLevelR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortToolTempLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExtTempLev" +
            "el", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExtTempLev" +
            "elResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExtTempLev" +
            "elfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolExtTempLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExtTempLev" +
            "el", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExtTempLev" +
            "elResponse")]
        System.Threading.Tasks.Task SetPortToolExtTempLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFlowLevel", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFlowLevelR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFlowLevelf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolFlowLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFlowLevel", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolFlowLevelR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortToolFlowLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelFlow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolProfileMod" +
            "e", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolProfileMod" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolProfileMod" +
            "efaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolProfileMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolProfileMod" +
            "e", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolProfileMod" +
            "eResponse")]
        System.Threading.Tasks.Task SetPortToolProfileModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSleepDelay(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeSleep delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "Response")]
        System.Threading.Tasks.Task SetPortToolSleepDelayAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeSleep delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "Enabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "EnabledResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "EnabledfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSleepDelayEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "Enabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepDelay" +
            "EnabledResponse")]
        System.Threading.Tasks.Task SetPortToolSleepDelayEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelay", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolHibernationDelay(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeHibernation delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelay", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayResponse")]
        System.Threading.Tasks.Task SetPortToolHibernationDelayAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeHibernation delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayEnabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayEnabledResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayEnabledfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolHibernationDelayEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayEnabled", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolHibernatio" +
            "nDelayEnabledResponse")]
        System.Threading.Tasks.Task SetPortToolHibernationDelayEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepTempR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepTempf" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolSleepTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepTemp", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolSleepTempR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortToolSleepTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolAdjustTemp" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolAdjustTemp" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolAdjustTemp" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolAdjustTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolAdjustTemp" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolAdjustTemp" +
            "Response")]
        System.Threading.Tasks.Task SetPortToolAdjustTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolCartridge", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolCartridgeR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolCartridgef" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolCartridge(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_Cartridge cartridge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolCartridge", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolCartridgeR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortToolCartridgeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_Cartridge cartridge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTimeToStop" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTimeToStop" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTimeToStop" +
            "faultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolTimeToStop(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int timetostop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTimeToStop" +
            "", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolTimeToStop" +
            "Response")]
        System.Threading.Tasks.Task SetPortToolTimeToStopAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int timetostop);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExternalTC" +
            "Mode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExternalTC" +
            "ModeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExternalTC" +
            "ModefaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolExternalTCMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ExternalTCMode_HA mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExternalTC" +
            "Mode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolExternalTC" +
            "ModeResponse")]
        System.Threading.Tasks.Task SetPortToolExternalTCModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ExternalTCMode_HA mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolStartMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolStartModeR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolStartModef" +
            "aultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void SetPortToolStartMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff toolButton, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff standOut, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PedalAction pedalAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolStartMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/SetPortToolStartModeR" +
            "esponse")]
        System.Threading.Tasks.Task SetPortToolStartModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff toolButton, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff standOut, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PedalAction pedalAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortCounters", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortCountersRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortCountersfaultE" +
            "rrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_Port_Counters GetPortCounters(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortCounters", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetPortCountersRespon" +
            "se")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Port_Counters> GetPortCountersAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ResetPortPartialCount" +
            "ers", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ResetPortPartialCount" +
            "ersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/ResetPortPartialCount" +
            "ersfaultErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        void ResetPortPartialCounters(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/ResetPortPartialCount" +
            "ers", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/ResetPortPartialCount" +
            "ersResponse")]
        System.Threading.Tasks.Task ResetPortPartialCountersAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBC_ConnectRemote.JBCService.faultError), Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModefaul" +
            "tErrorFault", Name="faultError", Namespace="http://schemas.datacontract.org/2004/07/JBC_Connect")]
        JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus GetContinuousMode(long stationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousMode", ReplyAction="http://JBCStationControllerSrv/IJBCStationControllerService/GetContinuousModeResp" +
            "onse")]
        System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus> GetContinuousModeAsync(long stationID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJBCStationControllerServiceChannel : JBC_ConnectRemote.JBCService.IJBCStationControllerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JBCStationControllerServiceClient : System.ServiceModel.ClientBase<JBC_ConnectRemote.JBCService.IJBCStationControllerService>, JBC_ConnectRemote.JBCService.IJBCStationControllerService {
        
        public JBCStationControllerServiceClient() {
        }
        
        public JBCStationControllerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JBCStationControllerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JBCStationControllerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JBCStationControllerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetContinuousModeDataCount(long stationID, uint traceID) {
            return base.Channel.GetContinuousModeDataCount(stationID, traceID);
        }
        
        public System.Threading.Tasks.Task<int> GetContinuousModeDataCountAsync(long stationID, uint traceID) {
            return base.Channel.GetContinuousModeDataCountAsync(stationID, traceID);
        }
        
        public uint StartContinuousMode(long stationID) {
            return base.Channel.StartContinuousMode(stationID);
        }
        
        public System.Threading.Tasks.Task<uint> StartContinuousModeAsync(long stationID) {
            return base.Channel.StartContinuousModeAsync(stationID);
        }
        
        public void StopContinuousMode(long stationID, uint traceID) {
            base.Channel.StopContinuousMode(stationID, traceID);
        }
        
        public System.Threading.Tasks.Task StopContinuousModeAsync(long stationID, uint traceID) {
            return base.Channel.StopContinuousModeAsync(stationID, traceID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeData GetContinuousModeNextData(long stationID, uint traceID) {
            return base.Channel.GetContinuousModeNextData(stationID, traceID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData> GetContinuousModeNextDataAsync(long stationID, uint traceID) {
            return base.Channel.GetContinuousModeNextDataAsync(stationID, traceID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA GetContinuousModeNextData_HA(long stationID, uint traceID) {
            return base.Channel.GetContinuousModeNextData_HA(stationID, traceID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA> GetContinuousModeNextData_HAAsync(long stationID, uint traceID) {
            return base.Channel.GetContinuousModeNextData_HAAsync(stationID, traceID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeData[] GetContinuousModeNextDataChunk(long stationID, uint traceID, int iChunk) {
            return base.Channel.GetContinuousModeNextDataChunk(stationID, traceID, iChunk);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData[]> GetContinuousModeNextDataChunkAsync(long stationID, uint traceID, int iChunk) {
            return base.Channel.GetContinuousModeNextDataChunkAsync(stationID, traceID, iChunk);
        }
        
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA[] GetContinuousModeNextDataChunk_HA(long stationID, uint traceID, int iChunk) {
            return base.Channel.GetContinuousModeNextDataChunk_HA(stationID, traceID, iChunk);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeData_HA[]> GetContinuousModeNextDataChunk_HAAsync(long stationID, uint traceID, int iChunk) {
            return base.Channel.GetContinuousModeNextDataChunk_HAAsync(stationID, traceID, iChunk);
        }
        
        public void SetContinuousMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_SpeedContinuousMode Speed, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portA, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portB, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portC, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portD) {
            base.Channel.SetContinuousMode(stationID, Speed, portA, portB, portC, portD);
        }
        
        public System.Threading.Tasks.Task SetContinuousModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_SpeedContinuousMode Speed, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portA, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portB, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portC, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portD) {
            return base.Channel.SetContinuousModeAsync(stationID, Speed, portA, portB, portC, portD);
        }
        
        public JBC_ConnectRemote.JBCService.dc_EthernetConfiguration GetEthernetConfiguration(long stationID) {
            return base.Channel.GetEthernetConfiguration(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_EthernetConfiguration> GetEthernetConfigurationAsync(long stationID) {
            return base.Channel.GetEthernetConfigurationAsync(stationID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_RobotConfiguration GetRobotConfiguration(long stationID) {
            return base.Channel.GetRobotConfiguration(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_RobotConfiguration> GetRobotConfigurationAsync(long stationID) {
            return base.Channel.GetRobotConfigurationAsync(stationID);
        }
        
        public void SetEthernetConfiguration(long stationID, JBC_ConnectRemote.JBCService.dc_EthernetConfiguration ethernetConfiguration) {
            base.Channel.SetEthernetConfiguration(stationID, ethernetConfiguration);
        }
        
        public System.Threading.Tasks.Task SetEthernetConfigurationAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EthernetConfiguration ethernetConfiguration) {
            return base.Channel.SetEthernetConfigurationAsync(stationID, ethernetConfiguration);
        }
        
        public void SetRobotConfiguration(long stationID, JBC_ConnectRemote.JBCService.dc_RobotConfiguration robotConfiguration) {
            base.Channel.SetRobotConfiguration(stationID, robotConfiguration);
        }
        
        public System.Threading.Tasks.Task SetRobotConfigurationAsync(long stationID, JBC_ConnectRemote.JBCService.dc_RobotConfiguration robotConfiguration) {
            return base.Channel.SetRobotConfigurationAsync(stationID, robotConfiguration);
        }
        
        public JBC_ConnectRemote.JBCService.dc_PeripheralInfo[] GetAllPeripheralInfo(long stationID) {
            return base.Channel.GetAllPeripheralInfo(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_PeripheralInfo[]> GetAllPeripheralInfoAsync(long stationID) {
            return base.Channel.GetAllPeripheralInfoAsync(stationID);
        }
        
        public void SetPeripheralInfo(long stationID, JBC_ConnectRemote.JBCService.dc_PeripheralInfo peripheralInfo) {
            base.Channel.SetPeripheralInfo(stationID, peripheralInfo);
        }
        
        public System.Threading.Tasks.Task SetPeripheralInfoAsync(long stationID, JBC_ConnectRemote.JBCService.dc_PeripheralInfo peripheralInfo) {
            return base.Channel.SetPeripheralInfoAsync(stationID, peripheralInfo);
        }
        
        public JBC_ConnectRemote.JBCService.dc_Profile_HA[] GetAllProfiles_HA(long stationID) {
            return base.Channel.GetAllProfiles_HA(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Profile_HA[]> GetAllProfiles_HAAsync(long stationID) {
            return base.Channel.GetAllProfiles_HAAsync(stationID);
        }
        
        public string GetSelectedProfile_HA(long stationID) {
            return base.Channel.GetSelectedProfile_HA(stationID);
        }
        
        public System.Threading.Tasks.Task<string> GetSelectedProfile_HAAsync(long stationID) {
            return base.Channel.GetSelectedProfile_HAAsync(stationID);
        }
        
        public void SetProfile_HA(long stationID, JBC_ConnectRemote.JBCService.dc_Profile_HA profile) {
            base.Channel.SetProfile_HA(stationID, profile);
        }
        
        public System.Threading.Tasks.Task SetProfile_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_Profile_HA profile) {
            return base.Channel.SetProfile_HAAsync(stationID, profile);
        }
        
        public void DeleteProfile_HA(long stationID, string profileName) {
            base.Channel.DeleteProfile_HA(stationID, profileName);
        }
        
        public System.Threading.Tasks.Task DeleteProfile_HAAsync(long stationID, string profileName) {
            return base.Channel.DeleteProfile_HAAsync(stationID, profileName);
        }
        
        public void SyncProfiles_HA(long stationID) {
            base.Channel.SyncProfiles_HA(stationID);
        }
        
        public System.Threading.Tasks.Task SyncProfiles_HAAsync(long stationID) {
            return base.Channel.SyncProfiles_HAAsync(stationID);
        }
        
        public uint SetTransaction(long stationID) {
            return base.Channel.SetTransaction(stationID);
        }
        
        public System.Threading.Tasks.Task<uint> SetTransactionAsync(long stationID) {
            return base.Channel.SetTransactionAsync(stationID);
        }
        
        public bool QueryEndedTransaction(long stationID, uint transactionID) {
            return base.Channel.QueryEndedTransaction(stationID, transactionID);
        }
        
        public System.Threading.Tasks.Task<bool> QueryEndedTransactionAsync(long stationID, uint transactionID) {
            return base.Channel.QueryEndedTransactionAsync(stationID, transactionID);
        }
        
        public void SetDefaultStationParams(long stationID) {
            base.Channel.SetDefaultStationParams(stationID);
        }
        
        public System.Threading.Tasks.Task SetDefaultStationParamsAsync(long stationID) {
            return base.Channel.SetDefaultStationParamsAsync(stationID);
        }
        
        public void ResetStation(long stationID) {
            base.Channel.ResetStation(stationID);
        }
        
        public System.Threading.Tasks.Task ResetStationAsync(long stationID) {
            return base.Channel.ResetStationAsync(stationID);
        }
        
        public long[] GetStationListUpdating() {
            return base.Channel.GetStationListUpdating();
        }
        
        public System.Threading.Tasks.Task<long[]> GetStationListUpdatingAsync() {
            return base.Channel.GetStationListUpdatingAsync();
        }
        
        public void UpdateStations(JBC_ConnectRemote.JBCService.dc_FirmwareStation[] listStationsToUpdate) {
            base.Channel.UpdateStations(listStationsToUpdate);
        }
        
        public System.Threading.Tasks.Task UpdateStationsAsync(JBC_ConnectRemote.JBCService.dc_FirmwareStation[] listStationsToUpdate) {
            return base.Channel.UpdateStationsAsync(listStationsToUpdate);
        }
        
        public void LockStation(string stationUID, uint timeout) {
            base.Channel.LockStation(stationUID, timeout);
        }
        
        public System.Threading.Tasks.Task LockStationAsync(string stationUID, uint timeout) {
            return base.Channel.LockStationAsync(stationUID, timeout);
        }
        
        public void DeactivatePortStation(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.DeactivatePortStation(stationUID, portNbr);
        }
        
        public System.Threading.Tasks.Task DeactivatePortStationAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.DeactivatePortStationAsync(stationUID, portNbr);
        }
        
        public void ShowMessage(long stationID, string message, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_MessageType messageType) {
            base.Channel.ShowMessage(stationID, message, messageType);
        }
        
        public System.Threading.Tasks.Task ShowMessageAsync(long stationID, string message, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_MessageType messageType) {
            return base.Channel.ShowMessageAsync(stationID, message, messageType);
        }
        
        public void StartTraceability(System.Uri uriTraceManager, string ServerCode) {
            base.Channel.StartTraceability(uriTraceManager, ServerCode);
        }
        
        public System.Threading.Tasks.Task StartTraceabilityAsync(System.Uri uriTraceManager, string ServerCode) {
            return base.Channel.StartTraceabilityAsync(uriTraceManager, ServerCode);
        }
        
        public void StopTraceability() {
            base.Channel.StopTraceability();
        }
        
        public System.Threading.Tasks.Task StopTraceabilityAsync() {
            return base.Channel.StopTraceabilityAsync();
        }
        
        public void NewUserSession(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, long userID, string userName, string inputDeviceID) {
            base.Channel.NewUserSession(stationUID, portNbr, userID, userName, inputDeviceID);
        }
        
        public System.Threading.Tasks.Task NewUserSessionAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, long userID, string userName, string inputDeviceID) {
            return base.Channel.NewUserSessionAsync(stationUID, portNbr, userID, userName, inputDeviceID);
        }
        
        public void CloseUserSession(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.CloseUserSession(stationUID, portNbr);
        }
        
        public System.Threading.Tasks.Task CloseUserSessionAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.CloseUserSessionAsync(stationUID, portNbr);
        }
        
        public long GetAuthenticatedUser(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetAuthenticatedUser(stationUID, portNbr);
        }
        
        public System.Threading.Tasks.Task<long> GetAuthenticatedUserAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetAuthenticatedUserAsync(stationUID, portNbr);
        }
        
        public System.DateTime GetDate() {
            return base.Channel.GetDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDateAsync() {
            return base.Channel.GetDateAsync();
        }
        
        public void SetDate(System.DateTime newDate) {
            base.Channel.SetDate(newDate);
        }
        
        public System.Threading.Tasks.Task SetDateAsync(System.DateTime newDate) {
            return base.Channel.SetDateAsync(newDate);
        }
        
        public void AddWorkOptionDetails(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.AddWorkOptionDetails(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task AddWorkOptionDetailsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.AddWorkOptionDetailsAsync(stationID, portNbr);
        }
        
        public void DeleteWorkOptionDetails(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.DeleteWorkOptionDetails(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task DeleteWorkOptionDetailsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.DeleteWorkOptionDetailsAsync(stationID, portNbr);
        }
        
        public void ShowWorkOptionDetails(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.ShowWorkOptionDetails(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task ShowWorkOptionDetailsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.ShowWorkOptionDetailsAsync(stationID, portNbr);
        }
        
        public void ShowHelpResource(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.ShowHelpResource(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task ShowHelpResourceAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.ShowHelpResourceAsync(stationID, portNbr);
        }
        
        public void LoadConfigurationPortStation(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_ConfigurationPortStation configuration) {
            base.Channel.LoadConfigurationPortStation(stationUID, portNbr, configuration);
        }
        
        public System.Threading.Tasks.Task LoadConfigurationPortStationAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_ConfigurationPortStation configuration) {
            return base.Channel.LoadConfigurationPortStationAsync(stationUID, portNbr, configuration);
        }
        
        public string GetTraceFolder() {
            return base.Channel.GetTraceFolder();
        }
        
        public System.Threading.Tasks.Task<string> GetTraceFolderAsync() {
            return base.Channel.GetTraceFolderAsync();
        }
        
        public void SetTraceSpeed(string stationUID, JBC_ConnectRemote.JBCService.SpeedContinuousMode captureSpeed) {
            base.Channel.SetTraceSpeed(stationUID, captureSpeed);
        }
        
        public System.Threading.Tasks.Task SetTraceSpeedAsync(string stationUID, JBC_ConnectRemote.JBCService.SpeedContinuousMode captureSpeed) {
            return base.Channel.SetTraceSpeedAsync(stationUID, captureSpeed);
        }
        
        public void StartTrace(string stationUID) {
            base.Channel.StartTrace(stationUID);
        }
        
        public System.Threading.Tasks.Task StartTraceAsync(string stationUID) {
            return base.Channel.StartTraceAsync(stationUID);
        }
        
        public void StartTracePort(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.StartTracePort(stationUID, portNbr);
        }
        
        public System.Threading.Tasks.Task StartTracePortAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.StartTracePortAsync(stationUID, portNbr);
        }
        
        public void StopTrace(string stationUID) {
            base.Channel.StopTrace(stationUID);
        }
        
        public System.Threading.Tasks.Task StopTraceAsync(string stationUID) {
            return base.Channel.StopTraceAsync(stationUID);
        }
        
        public void StopTracePort(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.StopTracePort(stationUID, portNbr);
        }
        
        public System.Threading.Tasks.Task StopTracePortAsync(string stationUID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.StopTracePortAsync(stationUID, portNbr);
        }
        
        public string[] GetListRecordedDataFiles() {
            return base.Channel.GetListRecordedDataFiles();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListRecordedDataFilesAsync() {
            return base.Channel.GetListRecordedDataFilesAsync();
        }
        
        public JBC_ConnectRemote.JBCService.dc_TraceDataSequence GetRecordedData(string fileName, int nSequence) {
            return base.Channel.GetRecordedData(fileName, nSequence);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_TraceDataSequence> GetRecordedDataAsync(string fileName, int nSequence) {
            return base.Channel.GetRecordedDataAsync(fileName, nSequence);
        }
        
        public void DeleteRecordedDataFile(string fileName) {
            base.Channel.DeleteRecordedDataFile(fileName);
        }
        
        public System.Threading.Tasks.Task DeleteRecordedDataFileAsync(string fileName) {
            return base.Channel.DeleteRecordedDataFileAsync(fileName);
        }
        
        public JBC_ConnectRemote.JBCService.dc_StationController_Info GetStationControllerInfo() {
            return base.Channel.GetStationControllerInfo();
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_StationController_Info> GetStationControllerInfoAsync() {
            return base.Channel.GetStationControllerInfoAsync();
        }
        
        public void StationControllerSearch(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerAction action, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype) {
            base.Channel.StationControllerSearch(action, conntype);
        }
        
        public System.Threading.Tasks.Task StationControllerSearchAsync(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerAction action, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype) {
            return base.Channel.StationControllerSearchAsync(action, conntype);
        }
        
        public bool StationControllerIsSearching(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype) {
            return base.Channel.StationControllerIsSearching(conntype);
        }
        
        public System.Threading.Tasks.Task<bool> StationControllerIsSearchingAsync(JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_StationControllerConnType conntype) {
            return base.Channel.StationControllerIsSearchingAsync(conntype);
        }
        
        public int GetStationCount() {
            return base.Channel.GetStationCount();
        }
        
        public System.Threading.Tasks.Task<int> GetStationCountAsync() {
            return base.Channel.GetStationCountAsync();
        }
        
        public long[] GetStationList() {
            return base.Channel.GetStationList();
        }
        
        public System.Threading.Tasks.Task<long[]> GetStationListAsync() {
            return base.Channel.GetStationListAsync();
        }
        
        public JBC_ConnectRemote.JBCService.dc_Station_Sold_Info GetStationInfo(long stationID) {
            return base.Channel.GetStationInfo(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_Sold_Info> GetStationInfoAsync(long stationID) {
            return base.Channel.GetStationInfoAsync(stationID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_Station_Sold_Status GetStationStatus(long stationID) {
            return base.Channel.GetStationStatus(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_Sold_Status> GetStationStatusAsync(long stationID) {
            return base.Channel.GetStationStatusAsync(stationID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_Station_HA_Status GetStationStatus_HA(long stationID) {
            return base.Channel.GetStationStatus_HA(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_HA_Status> GetStationStatus_HAAsync(long stationID) {
            return base.Channel.GetStationStatus_HAAsync(stationID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection GetControlMode(long stationID) {
            return base.Channel.GetControlMode(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection> GetControlModeAsync(long stationID) {
            return base.Channel.GetControlModeAsync(stationID);
        }
        
        public void SetControlMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection mode, string userName) {
            base.Channel.SetControlMode(stationID, mode, userName);
        }
        
        public System.Threading.Tasks.Task SetControlModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ControlModeConnection mode, string userName) {
            return base.Channel.SetControlModeAsync(stationID, mode, userName);
        }
        
        public void SetRemoteMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            base.Channel.SetRemoteMode(stationID, onoff);
        }
        
        public System.Threading.Tasks.Task SetRemoteModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            return base.Channel.SetRemoteModeAsync(stationID, onoff);
        }
        
        public void KeepControlMode(long stationID) {
            base.Channel.KeepControlMode(stationID);
        }
        
        public System.Threading.Tasks.Task KeepControlModeAsync(long stationID) {
            return base.Channel.KeepControlModeAsync(stationID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_StatusTool GetPortStatus(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetPortStatus(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_StatusTool> GetPortStatusAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetPortStatusAsync(stationID, portNbr);
        }
        
        public JBC_ConnectRemote.JBCService.dc_StatusTool_HA GetPortStatus_HA(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetPortStatus_HA(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_StatusTool_HA> GetPortStatus_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetPortStatus_HAAsync(stationID, portNbr);
        }
        
        public void SetPortStatusTool(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff sleep, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff extractor, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff desolder) {
            base.Channel.SetPortStatusTool(stationID, portNbr, sleep, extractor, desolder);
        }
        
        public System.Threading.Tasks.Task SetPortStatusToolAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff sleep, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff extractor, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff desolder) {
            return base.Channel.SetPortStatusToolAsync(stationID, portNbr, sleep, extractor, desolder);
        }
        
        public void SetPortStatusTool_HA(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff heater, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff suction) {
            base.Channel.SetPortStatusTool_HA(stationID, portNbr, heater, suction);
        }
        
        public System.Threading.Tasks.Task SetPortStatusTool_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff heater, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff suction) {
            return base.Channel.SetPortStatusTool_HAAsync(stationID, portNbr, heater, suction);
        }
        
        public JBC_ConnectRemote.JBCService.dc_Station_Sold_Settings GetStationSettings(long stationID) {
            return base.Channel.GetStationSettings(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_Sold_Settings> GetStationSettingsAsync(long stationID) {
            return base.Channel.GetStationSettingsAsync(stationID);
        }
        
        public JBC_ConnectRemote.JBCService.dc_Station_HA_Settings GetStationSettings_HA(long stationID) {
            return base.Channel.GetStationSettings_HA(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Station_HA_Settings> GetStationSettings_HAAsync(long stationID) {
            return base.Channel.GetStationSettings_HAAsync(stationID);
        }
        
        public string GetStationPIN(long stationID) {
            return base.Channel.GetStationPIN(stationID);
        }
        
        public System.Threading.Tasks.Task<string> GetStationPINAsync(long stationID) {
            return base.Channel.GetStationPINAsync(stationID);
        }
        
        public void SetStationName(long stationID, string newName) {
            base.Channel.SetStationName(stationID, newName);
        }
        
        public System.Threading.Tasks.Task SetStationNameAsync(long stationID, string newName) {
            return base.Channel.SetStationNameAsync(stationID, newName);
        }
        
        public void SetStationPIN(long stationID, string newPIN) {
            base.Channel.SetStationPIN(stationID, newPIN);
        }
        
        public System.Threading.Tasks.Task SetStationPINAsync(long stationID, string newPIN) {
            return base.Channel.SetStationPINAsync(stationID, newPIN);
        }
        
        public void SetStationTempUnit(long stationID, string newTempUnit) {
            base.Channel.SetStationTempUnit(stationID, newTempUnit);
        }
        
        public System.Threading.Tasks.Task SetStationTempUnitAsync(long stationID, string newTempUnit) {
            return base.Channel.SetStationTempUnitAsync(stationID, newTempUnit);
        }
        
        public void SetStationMinTemp(long stationID, int newTemp, string tempUnit) {
            base.Channel.SetStationMinTemp(stationID, newTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetStationMinTempAsync(long stationID, int newTemp, string tempUnit) {
            return base.Channel.SetStationMinTempAsync(stationID, newTemp, tempUnit);
        }
        
        public void SetStationMaxTemp(long stationID, int newTemp, string tempUnit) {
            base.Channel.SetStationMaxTemp(stationID, newTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetStationMaxTempAsync(long stationID, int newTemp, string tempUnit) {
            return base.Channel.SetStationMaxTempAsync(stationID, newTemp, tempUnit);
        }
        
        public void SetStationN2Mode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            base.Channel.SetStationN2Mode(stationID, onoff);
        }
        
        public System.Threading.Tasks.Task SetStationN2ModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            return base.Channel.SetStationN2ModeAsync(stationID, onoff);
        }
        
        public void SetStationHelpText(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            base.Channel.SetStationHelpText(stationID, onoff);
        }
        
        public System.Threading.Tasks.Task SetStationHelpTextAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            return base.Channel.SetStationHelpTextAsync(stationID, onoff);
        }
        
        public void SetStationBeep(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            base.Channel.SetStationBeep(stationID, onoff);
        }
        
        public System.Threading.Tasks.Task SetStationBeepAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            return base.Channel.SetStationBeepAsync(stationID, onoff);
        }
        
        public void SetStationPowerLimit(long stationID, int newPowerLimit) {
            base.Channel.SetStationPowerLimit(stationID, newPowerLimit);
        }
        
        public System.Threading.Tasks.Task SetStationPowerLimitAsync(long stationID, int newPowerLimit) {
            return base.Channel.SetStationPowerLimitAsync(stationID, newPowerLimit);
        }
        
        public void SetStationMinExtTemp(long stationID, int newTemp, string tempUnit) {
            base.Channel.SetStationMinExtTemp(stationID, newTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetStationMinExtTempAsync(long stationID, int newTemp, string tempUnit) {
            return base.Channel.SetStationMinExtTempAsync(stationID, newTemp, tempUnit);
        }
        
        public void SetStationMaxExtTemp(long stationID, int newTemp, string tempUnit) {
            base.Channel.SetStationMaxExtTemp(stationID, newTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetStationMaxExtTempAsync(long stationID, int newTemp, string tempUnit) {
            return base.Channel.SetStationMaxExtTempAsync(stationID, newTemp, tempUnit);
        }
        
        public void SetStationMinFlow(long stationID, int newFlow) {
            base.Channel.SetStationMinFlow(stationID, newFlow);
        }
        
        public System.Threading.Tasks.Task SetStationMinFlowAsync(long stationID, int newFlow) {
            return base.Channel.SetStationMinFlowAsync(stationID, newFlow);
        }
        
        public void SetStationMaxFlow(long stationID, int newFlow) {
            base.Channel.SetStationMaxFlow(stationID, newFlow);
        }
        
        public System.Threading.Tasks.Task SetStationMaxFlowAsync(long stationID, int newFlow) {
            return base.Channel.SetStationMaxFlowAsync(stationID, newFlow);
        }
        
        public void SetStationPINEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            base.Channel.SetStationPINEnabled(stationID, onoff);
        }
        
        public System.Threading.Tasks.Task SetStationPINEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            return base.Channel.SetStationPINEnabledAsync(stationID, onoff);
        }
        
        public void SetStationLocked(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            base.Channel.SetStationLocked(stationID, onoff);
        }
        
        public System.Threading.Tasks.Task SetStationLockedAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff onoff) {
            return base.Channel.SetStationLockedAsync(stationID, onoff);
        }
        
        public JBC_ConnectRemote.JBCService.dc_PortToolSettings GetPortToolSettings(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool) {
            return base.Channel.GetPortToolSettings(stationID, portNbr, tool);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_PortToolSettings> GetPortToolSettingsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool) {
            return base.Channel.GetPortToolSettingsAsync(stationID, portNbr, tool);
        }
        
        public JBC_ConnectRemote.JBCService.dc_PortToolSettings_HA GetPortToolSettings_HA(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool) {
            return base.Channel.GetPortToolSettings_HA(stationID, portNbr, tool);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_PortToolSettings_HA> GetPortToolSettings_HAAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool) {
            return base.Channel.GetPortToolSettings_HAAsync(stationID, portNbr, tool);
        }
        
        public void SetPortToolSelectedTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit) {
            base.Channel.SetPortToolSelectedTemp(stationID, portNbr, temp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit) {
            return base.Channel.SetPortToolSelectedTempAsync(stationID, portNbr, temp, tempUnit);
        }
        
        public void SetPortToolSelectedTempStep(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit) {
            base.Channel.SetPortToolSelectedTempStep(stationID, portNbr, signStep, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedTempStepAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit) {
            return base.Channel.SetPortToolSelectedTempStepAsync(stationID, portNbr, signStep, tempUnit);
        }
        
        public void SetPortToolSelectedFlow(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int flow) {
            base.Channel.SetPortToolSelectedFlow(stationID, portNbr, flow);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedFlowAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int flow) {
            return base.Channel.SetPortToolSelectedFlowAsync(stationID, portNbr, flow);
        }
        
        public void SetPortToolSelectedExtTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit) {
            base.Channel.SetPortToolSelectedExtTemp(stationID, portNbr, temp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedExtTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int temp, string tempUnit) {
            return base.Channel.SetPortToolSelectedExtTempAsync(stationID, portNbr, temp, tempUnit);
        }
        
        public void SetPortToolSelectedExtTempStep(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit) {
            base.Channel.SetPortToolSelectedExtTempStep(stationID, portNbr, signStep, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedExtTempStepAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, int signStep, string tempUnit) {
            return base.Channel.SetPortToolSelectedExtTempStepAsync(stationID, portNbr, signStep, tempUnit);
        }
        
        public void SetPortToolFixTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit) {
            base.Channel.SetPortToolFixTemp(stationID, portNbr, tool, temp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolFixTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit) {
            return base.Channel.SetPortToolFixTempAsync(stationID, portNbr, tool, temp, tempUnit);
        }
        
        public void SetPortToolLevels(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, int Level1Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, int Level2Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, int Level3Temp, string tempUnit) {
            base.Channel.SetPortToolLevels(stationID, portNbr, tool, LevelsOnOff, LevelSelected, Level1OnOff, Level1Temp, Level2OnOff, Level2Temp, Level3OnOff, Level3Temp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolLevelsAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, int Level1Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, int Level2Temp, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, int Level3Temp, string tempUnit) {
            return base.Channel.SetPortToolLevelsAsync(stationID, portNbr, tool, LevelsOnOff, LevelSelected, Level1OnOff, Level1Temp, Level2OnOff, Level2Temp, Level3OnOff, Level3Temp, tempUnit);
        }
        
        public void SetPortToolLevels_HA(
                    long stationID, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, 
                    int Level1Temp, 
                    int Level1Flow, 
                    int Level1ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, 
                    int Level2Temp, 
                    int Level2Flow, 
                    int Level2ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, 
                    int Level3Temp, 
                    int Level3Flow, 
                    int Level3ExtTemp, 
                    string tempUnit) {
            base.Channel.SetPortToolLevels_HA(stationID, portNbr, tool, LevelsOnOff, LevelSelected, Level1OnOff, Level1Temp, Level1Flow, Level1ExtTemp, Level2OnOff, Level2Temp, Level2Flow, Level2ExtTemp, Level3OnOff, Level3Temp, Level3Flow, Level3ExtTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolLevels_HAAsync(
                    long stationID, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level1OnOff, 
                    int Level1Temp, 
                    int Level1Flow, 
                    int Level1ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level2OnOff, 
                    int Level2Temp, 
                    int Level2Flow, 
                    int Level2ExtTemp, 
                    JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff Level3OnOff, 
                    int Level3Temp, 
                    int Level3Flow, 
                    int Level3ExtTemp, 
                    string tempUnit) {
            return base.Channel.SetPortToolLevels_HAAsync(stationID, portNbr, tool, LevelsOnOff, LevelSelected, Level1OnOff, Level1Temp, Level1Flow, Level1ExtTemp, Level2OnOff, Level2Temp, Level2Flow, Level2ExtTemp, Level3OnOff, Level3Temp, Level3Flow, Level3ExtTemp, tempUnit);
        }
        
        public void SetPortToolSelectedLevelEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff) {
            base.Channel.SetPortToolSelectedLevelEnabled(stationID, portNbr, tool, LevelsOnOff);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedLevelEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff LevelsOnOff) {
            return base.Channel.SetPortToolSelectedLevelEnabledAsync(stationID, portNbr, tool, LevelsOnOff);
        }
        
        public void SetPortToolSelectedLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected) {
            base.Channel.SetPortToolSelectedLevel(stationID, portNbr, tool, LevelSelected);
        }
        
        public System.Threading.Tasks.Task SetPortToolSelectedLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels LevelSelected) {
            return base.Channel.SetPortToolSelectedLevelAsync(stationID, portNbr, tool, LevelSelected);
        }
        
        public void SetPortToolTempLevelEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            base.Channel.SetPortToolTempLevelEnabled(stationID, portNbr, tool, Level, OnOff);
        }
        
        public System.Threading.Tasks.Task SetPortToolTempLevelEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            return base.Channel.SetPortToolTempLevelEnabledAsync(stationID, portNbr, tool, Level, OnOff);
        }
        
        public void SetPortToolTempLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit) {
            base.Channel.SetPortToolTempLevel(stationID, portNbr, tool, Level, LevelTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolTempLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit) {
            return base.Channel.SetPortToolTempLevelAsync(stationID, portNbr, tool, Level, LevelTemp, tempUnit);
        }
        
        public void SetPortToolExtTempLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit) {
            base.Channel.SetPortToolExtTempLevel(stationID, portNbr, tool, Level, LevelTemp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolExtTempLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelTemp, string tempUnit) {
            return base.Channel.SetPortToolExtTempLevelAsync(stationID, portNbr, tool, Level, LevelTemp, tempUnit);
        }
        
        public void SetPortToolFlowLevel(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelFlow) {
            base.Channel.SetPortToolFlowLevel(stationID, portNbr, tool, Level, LevelFlow);
        }
        
        public System.Threading.Tasks.Task SetPortToolFlowLevelAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ToolTemperatureLevels Level, int LevelFlow) {
            return base.Channel.SetPortToolFlowLevelAsync(stationID, portNbr, tool, Level, LevelFlow);
        }
        
        public void SetPortToolProfileMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            base.Channel.SetPortToolProfileMode(stationID, portNbr, OnOff);
        }
        
        public System.Threading.Tasks.Task SetPortToolProfileModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            return base.Channel.SetPortToolProfileModeAsync(stationID, portNbr, OnOff);
        }
        
        public void SetPortToolSleepDelay(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeSleep delay) {
            base.Channel.SetPortToolSleepDelay(stationID, portNbr, tool, delay);
        }
        
        public System.Threading.Tasks.Task SetPortToolSleepDelayAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeSleep delay) {
            return base.Channel.SetPortToolSleepDelayAsync(stationID, portNbr, tool, delay);
        }
        
        public void SetPortToolSleepDelayEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            base.Channel.SetPortToolSleepDelayEnabled(stationID, portNbr, tool, OnOff);
        }
        
        public System.Threading.Tasks.Task SetPortToolSleepDelayEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            return base.Channel.SetPortToolSleepDelayEnabledAsync(stationID, portNbr, tool, OnOff);
        }
        
        public void SetPortToolHibernationDelay(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeHibernation delay) {
            base.Channel.SetPortToolHibernationDelay(stationID, portNbr, tool, delay);
        }
        
        public System.Threading.Tasks.Task SetPortToolHibernationDelayAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_TimeHibernation delay) {
            return base.Channel.SetPortToolHibernationDelayAsync(stationID, portNbr, tool, delay);
        }
        
        public void SetPortToolHibernationDelayEnabled(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            base.Channel.SetPortToolHibernationDelayEnabled(stationID, portNbr, tool, OnOff);
        }
        
        public System.Threading.Tasks.Task SetPortToolHibernationDelayEnabledAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff OnOff) {
            return base.Channel.SetPortToolHibernationDelayEnabledAsync(stationID, portNbr, tool, OnOff);
        }
        
        public void SetPortToolSleepTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit) {
            base.Channel.SetPortToolSleepTemp(stationID, portNbr, tool, temp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolSleepTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit) {
            return base.Channel.SetPortToolSleepTempAsync(stationID, portNbr, tool, temp, tempUnit);
        }
        
        public void SetPortToolAdjustTemp(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit) {
            base.Channel.SetPortToolAdjustTemp(stationID, portNbr, tool, temp, tempUnit);
        }
        
        public System.Threading.Tasks.Task SetPortToolAdjustTempAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int temp, string tempUnit) {
            return base.Channel.SetPortToolAdjustTempAsync(stationID, portNbr, tool, temp, tempUnit);
        }
        
        public void SetPortToolCartridge(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_Cartridge cartridge) {
            base.Channel.SetPortToolCartridge(stationID, portNbr, tool, cartridge);
        }
        
        public System.Threading.Tasks.Task SetPortToolCartridgeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_Cartridge cartridge) {
            return base.Channel.SetPortToolCartridgeAsync(stationID, portNbr, tool, cartridge);
        }
        
        public void SetPortToolTimeToStop(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int timetostop) {
            base.Channel.SetPortToolTimeToStop(stationID, portNbr, tool, timetostop);
        }
        
        public System.Threading.Tasks.Task SetPortToolTimeToStopAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, int timetostop) {
            return base.Channel.SetPortToolTimeToStopAsync(stationID, portNbr, tool, timetostop);
        }
        
        public void SetPortToolExternalTCMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ExternalTCMode_HA mode) {
            base.Channel.SetPortToolExternalTCMode(stationID, portNbr, tool, mode);
        }
        
        public System.Threading.Tasks.Task SetPortToolExternalTCModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_ExternalTCMode_HA mode) {
            return base.Channel.SetPortToolExternalTCModeAsync(stationID, portNbr, tool, mode);
        }
        
        public void SetPortToolStartMode(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff toolButton, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff standOut, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PedalAction pedalAction) {
            base.Channel.SetPortToolStartMode(stationID, portNbr, tool, toolButton, standOut, pedalAction);
        }
        
        public System.Threading.Tasks.Task SetPortToolStartModeAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_GenericStationTools tool, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff toolButton, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_OnOff standOut, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_PedalAction pedalAction) {
            return base.Channel.SetPortToolStartModeAsync(stationID, portNbr, tool, toolButton, standOut, pedalAction);
        }
        
        public JBC_ConnectRemote.JBCService.dc_Port_Counters GetPortCounters(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetPortCounters(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_Port_Counters> GetPortCountersAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.GetPortCountersAsync(stationID, portNbr);
        }
        
        public void ResetPortPartialCounters(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            base.Channel.ResetPortPartialCounters(stationID, portNbr);
        }
        
        public System.Threading.Tasks.Task ResetPortPartialCountersAsync(long stationID, JBC_ConnectRemote.JBCService.dc_EnumConstJBCdc_Port portNbr) {
            return base.Channel.ResetPortPartialCountersAsync(stationID, portNbr);
        }
        
        public JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus GetContinuousMode(long stationID) {
            return base.Channel.GetContinuousMode(stationID);
        }
        
        public System.Threading.Tasks.Task<JBC_ConnectRemote.JBCService.dc_ContinuousModeStatus> GetContinuousModeAsync(long stationID) {
            return base.Channel.GetContinuousModeAsync(stationID);
        }
    }
}
