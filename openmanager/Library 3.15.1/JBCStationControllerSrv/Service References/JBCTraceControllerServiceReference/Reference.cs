//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JBCTraceControllerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
    [System.SerializableAttribute()]
    public partial class ErrorTrace : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperacionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operacion {
            get {
                return this.OperacionField;
            }
            set {
                if ((object.ReferenceEquals(this.OperacionField, value) != true)) {
                    this.OperacionField = value;
                    this.RaisePropertyChanged("Operacion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Structures.OptionsPort", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
    [System.SerializableAttribute()]
    public partial struct StructuresOptionsPort : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Structures.TypeNotification", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
    public enum StructuresTypeNotification : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        eInformation = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        eAlert = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        eError = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Structures.HelpResource", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
    [System.SerializableAttribute()]
    public partial struct StructuresHelpResource : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int idField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Structures.TypeAccesory", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
    public enum StructuresTypeAccesory : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        eAccesory = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Structures.StControllers", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
    [System.SerializableAttribute()]
    public partial struct StructuresStControllers : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JBCTraceControllerServiceReference.IHostTrace")]
    public interface IHostTrace {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/EnableStationsController", ReplyAction="http://tempuri.org/IHostTrace/EnableStationsControllerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/EnableStationsControllerErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool EnableStationsController(string Ip, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/EnableStationsController", ReplyAction="http://tempuri.org/IHostTrace/EnableStationsControllerResponse")]
        System.Threading.Tasks.Task<bool> EnableStationsControllerAsync(string Ip, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/DisableStationsController", ReplyAction="http://tempuri.org/IHostTrace/DisableStationsControllerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/DisableStationsControllerErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool DisableStationsController(string Ip, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/DisableStationsController", ReplyAction="http://tempuri.org/IHostTrace/DisableStationsControllerResponse")]
        System.Threading.Tasks.Task<bool> DisableStationsControllerAsync(string Ip, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/StationConnected", ReplyAction="http://tempuri.org/IHostTrace/StationConnectedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/StationConnectedErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool StationConnected(string CodeServer, string IdStation, long TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/StationConnected", ReplyAction="http://tempuri.org/IHostTrace/StationConnectedResponse")]
        System.Threading.Tasks.Task<bool> StationConnectedAsync(string CodeServer, string IdStation, long TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/StationDisconnected", ReplyAction="http://tempuri.org/IHostTrace/StationDisconnectedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/StationDisconnectedErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool StationDisconnected(string CodeServer, string IdStation, long TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/StationDisconnected", ReplyAction="http://tempuri.org/IHostTrace/StationDisconnectedResponse")]
        System.Threading.Tasks.Task<bool> StationDisconnectedAsync(string CodeServer, string IdStation, long TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/NewDataEntry", ReplyAction="http://tempuri.org/IHostTrace/NewDataEntryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/NewDataEntryErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool NewDataEntry(string CodeServer, string Data, long TimeStamp, string IdStation, int Port, string IdDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/NewDataEntry", ReplyAction="http://tempuri.org/IHostTrace/NewDataEntryResponse")]
        System.Threading.Tasks.Task<bool> NewDataEntryAsync(string CodeServer, string Data, long TimeStamp, string IdStation, int Port, string IdDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetOptionsPort", ReplyAction="http://tempuri.org/IHostTrace/GetOptionsPortResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/GetOptionsPortErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        JBCTraceControllerServiceReference.StructuresOptionsPort[] GetOptionsPort(string CodeServer, string IdStation, int Port, long TimeStamp, string Filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetOptionsPort", ReplyAction="http://tempuri.org/IHostTrace/GetOptionsPortResponse")]
        System.Threading.Tasks.Task<JBCTraceControllerServiceReference.StructuresOptionsPort[]> GetOptionsPortAsync(string CodeServer, string IdStation, int Port, long TimeStamp, string Filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/TraceNotificationStation", ReplyAction="http://tempuri.org/IHostTrace/TraceNotificationStationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/TraceNotificationStationErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool TraceNotificationStation(string CodeServer, string IdStation, string Message, JBCTraceControllerServiceReference.StructuresTypeNotification TyPeMessage, long TimeStamp, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/TraceNotificationStation", ReplyAction="http://tempuri.org/IHostTrace/TraceNotificationStationResponse")]
        System.Threading.Tasks.Task<bool> TraceNotificationStationAsync(string CodeServer, string IdStation, string Message, JBCTraceControllerServiceReference.StructuresTypeNotification TyPeMessage, long TimeStamp, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetHelpResource", ReplyAction="http://tempuri.org/IHostTrace/GetHelpResourceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/GetHelpResourceErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        JBCTraceControllerServiceReference.StructuresHelpResource GetHelpResource(string CodeServer, long IdResource, string TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetHelpResource", ReplyAction="http://tempuri.org/IHostTrace/GetHelpResourceResponse")]
        System.Threading.Tasks.Task<JBCTraceControllerServiceReference.StructuresHelpResource> GetHelpResourceAsync(string CodeServer, long IdResource, string TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/AccesoryStationConnected", ReplyAction="http://tempuri.org/IHostTrace/AccesoryStationConnectedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/AccesoryStationConnectedErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool AccesoryStationConnected(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/AccesoryStationConnected", ReplyAction="http://tempuri.org/IHostTrace/AccesoryStationConnectedResponse")]
        System.Threading.Tasks.Task<bool> AccesoryStationConnectedAsync(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/AccesoryStationDisconnected", ReplyAction="http://tempuri.org/IHostTrace/AccesoryStationDisconnectedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/AccesoryStationDisconnectedErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool AccesoryStationDisconnected(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/AccesoryStationDisconnected", ReplyAction="http://tempuri.org/IHostTrace/AccesoryStationDisconnectedResponse")]
        System.Threading.Tasks.Task<bool> AccesoryStationDisconnectedAsync(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetDate", ReplyAction="http://tempuri.org/IHostTrace/GetDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/GetDateErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        long GetDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetDate", ReplyAction="http://tempuri.org/IHostTrace/GetDateResponse")]
        System.Threading.Tasks.Task<long> GetDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/SynchronizingController", ReplyAction="http://tempuri.org/IHostTrace/SynchronizingControllerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/SynchronizingControllerErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool SynchronizingController(string CodeServer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/SynchronizingController", ReplyAction="http://tempuri.org/IHostTrace/SynchronizingControllerResponse")]
        System.Threading.Tasks.Task<bool> SynchronizingControllerAsync(string CodeServer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/SynchronizingControllers", ReplyAction="http://tempuri.org/IHostTrace/SynchronizingControllersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/SynchronizingControllersErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        string[] SynchronizingControllers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/SynchronizingControllers", ReplyAction="http://tempuri.org/IHostTrace/SynchronizingControllersResponse")]
        System.Threading.Tasks.Task<string[]> SynchronizingControllersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/CheckSyncControllers", ReplyAction="http://tempuri.org/IHostTrace/CheckSyncControllersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/CheckSyncControllersErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool CheckSyncControllers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/CheckSyncControllers", ReplyAction="http://tempuri.org/IHostTrace/CheckSyncControllersResponse")]
        System.Threading.Tasks.Task<bool> CheckSyncControllersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetRecordedDataStationControllers", ReplyAction="http://tempuri.org/IHostTrace/GetRecordedDataStationControllersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/GetRecordedDataStationControllersErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        void GetRecordedDataStationControllers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetRecordedDataStationControllers", ReplyAction="http://tempuri.org/IHostTrace/GetRecordedDataStationControllersResponse")]
        System.Threading.Tasks.Task GetRecordedDataStationControllersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetControllers", ReplyAction="http://tempuri.org/IHostTrace/GetControllersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/GetControllersErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        JBCTraceControllerServiceReference.StructuresStControllers[] GetControllers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetControllers", ReplyAction="http://tempuri.org/IHostTrace/GetControllersResponse")]
        System.Threading.Tasks.Task<JBCTraceControllerServiceReference.StructuresStControllers[]> GetControllersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/SetDate", ReplyAction="http://tempuri.org/IHostTrace/SetDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/SetDateErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool SetDate(string Ip, int Port, long TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/SetDate", ReplyAction="http://tempuri.org/IHostTrace/SetDateResponse")]
        System.Threading.Tasks.Task<bool> SetDateAsync(string Ip, int Port, long TimeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/LockStation", ReplyAction="http://tempuri.org/IHostTrace/LockStationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/LockStationErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool LockStation(string IdStation, string message, int timeout, bool dataentry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/LockStation", ReplyAction="http://tempuri.org/IHostTrace/LockStationResponse")]
        System.Threading.Tasks.Task<bool> LockStationAsync(string IdStation, string message, int timeout, bool dataentry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/NewUserSession", ReplyAction="http://tempuri.org/IHostTrace/NewUserSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/NewUserSessionErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool NewUserSession(string IdStation, int Port, string CodeUser, string NameUser, string iddevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/NewUserSession", ReplyAction="http://tempuri.org/IHostTrace/NewUserSessionResponse")]
        System.Threading.Tasks.Task<bool> NewUserSessionAsync(string IdStation, int Port, string CodeUser, string NameUser, string iddevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/CloseUserSession", ReplyAction="http://tempuri.org/IHostTrace/CloseUserSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/CloseUserSessionErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        bool CloseUserSession(string IdStation, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/CloseUserSession", ReplyAction="http://tempuri.org/IHostTrace/CloseUserSessionResponse")]
        System.Threading.Tasks.Task<bool> CloseUserSessionAsync(string IdStation, int Port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetStationControllerDate", ReplyAction="http://tempuri.org/IHostTrace/GetStationControllerDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(JBCTraceControllerServiceReference.ErrorTrace), Action="http://tempuri.org/IHostTrace/GetStationControllerDateErrorTraceFault", Name="ErrorTrace", Namespace="http://schemas.datacontract.org/2004/07/JBCTraceController")]
        string GetStationControllerDate(string ip, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHostTrace/GetStationControllerDate", ReplyAction="http://tempuri.org/IHostTrace/GetStationControllerDateResponse")]
        System.Threading.Tasks.Task<string> GetStationControllerDateAsync(string ip, int port);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHostTraceChannel : JBCTraceControllerServiceReference.IHostTrace, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HostTraceClient : System.ServiceModel.ClientBase<JBCTraceControllerServiceReference.IHostTrace>, JBCTraceControllerServiceReference.IHostTrace {
        
        public HostTraceClient() {
        }
        
        public HostTraceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HostTraceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HostTraceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HostTraceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool EnableStationsController(string Ip, int Port) {
            return base.Channel.EnableStationsController(Ip, Port);
        }
        
        public System.Threading.Tasks.Task<bool> EnableStationsControllerAsync(string Ip, int Port) {
            return base.Channel.EnableStationsControllerAsync(Ip, Port);
        }
        
        public bool DisableStationsController(string Ip, int Port) {
            return base.Channel.DisableStationsController(Ip, Port);
        }
        
        public System.Threading.Tasks.Task<bool> DisableStationsControllerAsync(string Ip, int Port) {
            return base.Channel.DisableStationsControllerAsync(Ip, Port);
        }
        
        public bool StationConnected(string CodeServer, string IdStation, long TimeStamp) {
            return base.Channel.StationConnected(CodeServer, IdStation, TimeStamp);
        }
        
        public System.Threading.Tasks.Task<bool> StationConnectedAsync(string CodeServer, string IdStation, long TimeStamp) {
            return base.Channel.StationConnectedAsync(CodeServer, IdStation, TimeStamp);
        }
        
        public bool StationDisconnected(string CodeServer, string IdStation, long TimeStamp) {
            return base.Channel.StationDisconnected(CodeServer, IdStation, TimeStamp);
        }
        
        public System.Threading.Tasks.Task<bool> StationDisconnectedAsync(string CodeServer, string IdStation, long TimeStamp) {
            return base.Channel.StationDisconnectedAsync(CodeServer, IdStation, TimeStamp);
        }
        
        public bool NewDataEntry(string CodeServer, string Data, long TimeStamp, string IdStation, int Port, string IdDevice) {
            return base.Channel.NewDataEntry(CodeServer, Data, TimeStamp, IdStation, Port, IdDevice);
        }
        
        public System.Threading.Tasks.Task<bool> NewDataEntryAsync(string CodeServer, string Data, long TimeStamp, string IdStation, int Port, string IdDevice) {
            return base.Channel.NewDataEntryAsync(CodeServer, Data, TimeStamp, IdStation, Port, IdDevice);
        }
        
        public JBCTraceControllerServiceReference.StructuresOptionsPort[] GetOptionsPort(string CodeServer, string IdStation, int Port, long TimeStamp, string Filter) {
            return base.Channel.GetOptionsPort(CodeServer, IdStation, Port, TimeStamp, Filter);
        }
        
        public System.Threading.Tasks.Task<JBCTraceControllerServiceReference.StructuresOptionsPort[]> GetOptionsPortAsync(string CodeServer, string IdStation, int Port, long TimeStamp, string Filter) {
            return base.Channel.GetOptionsPortAsync(CodeServer, IdStation, Port, TimeStamp, Filter);
        }
        
        public bool TraceNotificationStation(string CodeServer, string IdStation, string Message, JBCTraceControllerServiceReference.StructuresTypeNotification TyPeMessage, long TimeStamp, int Port) {
            return base.Channel.TraceNotificationStation(CodeServer, IdStation, Message, TyPeMessage, TimeStamp, Port);
        }
        
        public System.Threading.Tasks.Task<bool> TraceNotificationStationAsync(string CodeServer, string IdStation, string Message, JBCTraceControllerServiceReference.StructuresTypeNotification TyPeMessage, long TimeStamp, int Port) {
            return base.Channel.TraceNotificationStationAsync(CodeServer, IdStation, Message, TyPeMessage, TimeStamp, Port);
        }
        
        public JBCTraceControllerServiceReference.StructuresHelpResource GetHelpResource(string CodeServer, long IdResource, string TimeStamp) {
            return base.Channel.GetHelpResource(CodeServer, IdResource, TimeStamp);
        }
        
        public System.Threading.Tasks.Task<JBCTraceControllerServiceReference.StructuresHelpResource> GetHelpResourceAsync(string CodeServer, long IdResource, string TimeStamp) {
            return base.Channel.GetHelpResourceAsync(CodeServer, IdResource, TimeStamp);
        }
        
        public bool AccesoryStationConnected(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port) {
            return base.Channel.AccesoryStationConnected(CodeServer, IdStation, TypeAccesory, TimeStamp, Port);
        }
        
        public System.Threading.Tasks.Task<bool> AccesoryStationConnectedAsync(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port) {
            return base.Channel.AccesoryStationConnectedAsync(CodeServer, IdStation, TypeAccesory, TimeStamp, Port);
        }
        
        public bool AccesoryStationDisconnected(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port) {
            return base.Channel.AccesoryStationDisconnected(CodeServer, IdStation, TypeAccesory, TimeStamp, Port);
        }
        
        public System.Threading.Tasks.Task<bool> AccesoryStationDisconnectedAsync(string CodeServer, string IdStation, JBCTraceControllerServiceReference.StructuresTypeAccesory TypeAccesory, string TimeStamp, int Port) {
            return base.Channel.AccesoryStationDisconnectedAsync(CodeServer, IdStation, TypeAccesory, TimeStamp, Port);
        }
        
        public long GetDate() {
            return base.Channel.GetDate();
        }
        
        public System.Threading.Tasks.Task<long> GetDateAsync() {
            return base.Channel.GetDateAsync();
        }
        
        public bool SynchronizingController(string CodeServer) {
            return base.Channel.SynchronizingController(CodeServer);
        }
        
        public System.Threading.Tasks.Task<bool> SynchronizingControllerAsync(string CodeServer) {
            return base.Channel.SynchronizingControllerAsync(CodeServer);
        }
        
        public string[] SynchronizingControllers() {
            return base.Channel.SynchronizingControllers();
        }
        
        public System.Threading.Tasks.Task<string[]> SynchronizingControllersAsync() {
            return base.Channel.SynchronizingControllersAsync();
        }
        
        public bool CheckSyncControllers() {
            return base.Channel.CheckSyncControllers();
        }
        
        public System.Threading.Tasks.Task<bool> CheckSyncControllersAsync() {
            return base.Channel.CheckSyncControllersAsync();
        }
        
        public void GetRecordedDataStationControllers() {
            base.Channel.GetRecordedDataStationControllers();
        }
        
        public System.Threading.Tasks.Task GetRecordedDataStationControllersAsync() {
            return base.Channel.GetRecordedDataStationControllersAsync();
        }
        
        public JBCTraceControllerServiceReference.StructuresStControllers[] GetControllers() {
            return base.Channel.GetControllers();
        }
        
        public System.Threading.Tasks.Task<JBCTraceControllerServiceReference.StructuresStControllers[]> GetControllersAsync() {
            return base.Channel.GetControllersAsync();
        }
        
        public bool SetDate(string Ip, int Port, long TimeStamp) {
            return base.Channel.SetDate(Ip, Port, TimeStamp);
        }
        
        public System.Threading.Tasks.Task<bool> SetDateAsync(string Ip, int Port, long TimeStamp) {
            return base.Channel.SetDateAsync(Ip, Port, TimeStamp);
        }
        
        public bool LockStation(string IdStation, string message, int timeout, bool dataentry) {
            return base.Channel.LockStation(IdStation, message, timeout, dataentry);
        }
        
        public System.Threading.Tasks.Task<bool> LockStationAsync(string IdStation, string message, int timeout, bool dataentry) {
            return base.Channel.LockStationAsync(IdStation, message, timeout, dataentry);
        }
        
        public bool NewUserSession(string IdStation, int Port, string CodeUser, string NameUser, string iddevice) {
            return base.Channel.NewUserSession(IdStation, Port, CodeUser, NameUser, iddevice);
        }
        
        public System.Threading.Tasks.Task<bool> NewUserSessionAsync(string IdStation, int Port, string CodeUser, string NameUser, string iddevice) {
            return base.Channel.NewUserSessionAsync(IdStation, Port, CodeUser, NameUser, iddevice);
        }
        
        public bool CloseUserSession(string IdStation, int Port) {
            return base.Channel.CloseUserSession(IdStation, Port);
        }
        
        public System.Threading.Tasks.Task<bool> CloseUserSessionAsync(string IdStation, int Port) {
            return base.Channel.CloseUserSessionAsync(IdStation, Port);
        }
        
        public string GetStationControllerDate(string ip, int port) {
            return base.Channel.GetStationControllerDate(ip, port);
        }
        
        public System.Threading.Tasks.Task<string> GetStationControllerDateAsync(string ip, int port) {
            return base.Channel.GetStationControllerDateAsync(ip, port);
        }
    }
}
